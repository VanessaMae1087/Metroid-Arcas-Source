<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set null values

BlockPlasma = 0;

Health = 1;

Frozen = -1;
FrozenTime = 300;

Paralyzed = -1;
ParalyzedTime = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oMissile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.PausedGame
or global.PausedEnemies exit;


if IgnoreBeam exit;

// Beam

if ((ReflectMissile &amp;&amp; other.Super == 0) or (ReflectSMissile &amp;&amp; other.Super == 1))
{
 with (other)
 { 
  event_user(1)
  instance_destroy();
 }
}
else
{
 with (other)
 { 
  event_user(0)
  instance_destroy();
 }
 Health -= other.Damage;
 if CantBlink &lt;= 0
 {
  Blink = BlinkTime;
  CantBlink = CantBlinkTime;
  if Health &gt; 0
   event_user(1);
 }
 else
 Flash = 4;
}

if Health &lt;= 0
{
 event_user(0);
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBeam">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.PausedGame
or global.PausedEnemies exit;


if IgnoreBeam exit;
if ds_list_find_index(other.Hit,id) != -1 exit;

ds_list_add(other.Hit,id);

// Beam

if (((ReflectBeam &amp;&amp; other.Charged == 0) or !other.PowerBeam) or (ReflectCharged &amp;&amp; other.Charged == 1))
{
 Override = 0;
 
 if other.IBeam &amp;&amp; FreezeTime &gt; 0 &amp;&amp; Health &lt;= FreezeHealth
 {
  if FreezeSound &lt;= 0
  {
   sound_play_pos(sndFreeze,x,y);
   FreezeSound = 30;
  }
  Frozen = FreezeTime;
  with (other) 
  {
   event_user(2);
   event_user(0);
   if PBeam == 0 
   instance_destroy();
  }  
 }
 else
 if !other.PowerBeam &amp;&amp; ParalyzedTime &gt; 0 &amp;&amp; Health &lt;= ParalyzeHealth &amp;&amp; other.Charged
 {
  Paralyzed = ParalyzedTime;
  Override = 1;
 // sound_play_pos(sndParalyze,x,y);
  with (other) 
  {
   event_user(0);
   instance_destroy();
  }  
 }

 if !Override
 with (other)
 { 
  event_user(1)
  if PBeam == 0 or other.BlockPlasma
  instance_destroy();
 }
}
else
{
 Override = 0;
 if other.IBeam &amp;&amp; FreezeTime &gt; 0 &amp;&amp; Health &lt;= FreezeHealth
 {
  if FreezeSound &lt;= 0
  {
   sound_play_pos(sndFreeze,x,y);
   FreezeSound = 30;
  }
  Frozen = FreezeTime;
  with (other) event_user(2);
 }
 else
 if !other.PowerBeam &amp;&amp; ParalyzedTime &gt; 0 &amp;&amp; Health &lt;= ParalyzeHealth &amp;&amp; other.Charged
 {
  Paralyzed = ParalyzedTime;
  Override = 1;
//  sound_play_pos(sndParalyze,x,y);
  with (other) 
  {
   event_user(0);
   instance_destroy();
  }  
 }

 if !Override
 with (other)
 { 
  event_user(0)
  if PBeam == 0 or other.BlockPlasma 
  instance_destroy();
 }
}

if !(((ReflectBeam &amp;&amp; other.Charged == 0) or !other.PowerBeam) or (ReflectCharged &amp;&amp; other.Charged == 1))
{
 Health -= other.Damage;
 if CantBlink &lt;= 0
 {
  Blink = BlinkTime;
  CantBlink = CantBlinkTime;
  if Health &gt; 0
   event_user(1);
 }
 else
 Flash = 4;
}

if Health &lt;= 0
{
 event_user(0);
 instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBombExplosion">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.PausedGame
or global.PausedEnemies exit;

if IgnoreBomb or other.image_index &gt; 4 exit;
if ds_list_find_index(other.Hit,id) != -1 exit;

ds_list_add(other.Hit,id);

// Bomb

Health -= other.Damage;
if CantBlink &lt;= 0
{
 Blink = BlinkTime;
 CantBlink = CantBlinkTime;
 if Health &gt; 0
  event_user(1);
}
else
Flash = 4;

if Health &lt;= 0
{
 event_user(0);
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.PausedGame
or global.PausedEnemies exit;

// Frozen/Paralyzed

CanHurt = !(Frozen or Paralyzed or IgnoreSamus);
Dead = 0;

// Figure out her states

var Screwing = (other.State == other.JUMPING &amp;&amp; other.Spinning &amp;&amp; global.Power[P_SCREW] &amp;&amp; !other.InWater &amp;&amp; global.Suit != 3);
var Shining = (other.State == other.SUPERJUMP or other.Dash &gt;= other.DashTime);
var Pseudoing = (other.State == other.JUMPING &amp;&amp; other.Spinning &amp;&amp; other.ChargeIndex &gt; 46);

HealthPrev = Health;

if x &gt; other.x
 PushDir = -1;
 else
 PushDir = 1;
 
// COLLISION DAMAGES

if Screwing
{
 if ScrewDamage &gt;= 1000
 {
  explode(x,y,0);
  instance_destroy();
  DontExplode = 1;
  Dead = 1;
  if LogMenu != -1 &amp;&amp; LogIndex != -1
   add_log(LogMenu,LogIndex);
 }
 
 if ScrewDamage &gt; 0
 {
  Health -= ScrewDamage;
  if CantBlink &lt;= 0
  {
   Blink = BlinkTime;
   CantBlink = CantBlinkTime;
  }
 }
 
 if StopScrew &amp;&amp; Health &gt; 0 &amp;&amp; !other.Invincible &amp;&amp; CanHurt
 {
  if other.State != other.BALL &amp;&amp; other.SuperBall != 1
  other.State = other.HURT;
  other.Spinning = false;
  other.image_index = 0;
  other.yVel = yPush;
  other.xVel = xPush * PushDir;
  global.Energy -= Damage * dmult();
  if Damage != 0 other.Invincible = 60;
  other.Charge = 0;
  other.Dash = 0;
  other.StateTime = 0;
  sound_play_pos(sndHurt,other.x,other.y-15);
 }
}

if Shining &amp;&amp; !Dead
{
 if ShineDamage &gt;= 1000
 {
  explode(x,y,1);
  instance_destroy();
  DontExplode = 1;
  Dead = 1;
  if LogMenu != -1 &amp;&amp; LogIndex != -1
   add_log(LogMenu,LogIndex);
 }
 
 if ShineDamage &gt; 0
 { 
  Health -= ShineDamage;
  if CantBlink &lt;= 0
  {
   Blink = BlinkTime;
   CantBlink = CantBlinkTime;
  }
 }
 
 if StopShine &amp;&amp; Health &gt; 0 &amp;&amp; !other.Invincible &amp;&amp; CanHurt
 {
  if other.State != other.BALL &amp;&amp; other.SuperBall != 1
  other.State = other.HURT;
  other.Spinning = false;
  other.Dash = 0;
  other.Charge = 0;
  other.image_index = 0;
  other.yVel = yPush;
  other.xVel = xPush * PushDir;
  global.Energy -= Damage * dmult();
  if Damage != 0 other.Invincible = 60;
  other.Charge = 0;
  other.Dash = 0;
  other.StateTime = 0;
  sound_play_pos(sndHurt,other.x,other.y-15);
 }
}

if Pseudoing &amp;&amp; !Dead
{
 if PseudoDamage &gt;= 1000
 {
  explode(x,y,2);
  instance_destroy();
  DontExplode = 1;
  Dead = 1;
  if LogMenu != -1 &amp;&amp; LogIndex != -1
   add_log(LogMenu,LogIndex);
 }
 
 if Health &lt;= 0 &amp;&amp; PseudoDamage &lt; 1000
 {
  explode(x,y,2);
  Dead = 1;
  instance_destroy(); 
  DontExplode = 1;
  if LogMenu != -1 &amp;&amp; LogIndex != -1
   add_log(LogMenu,LogIndex);
 }
 
 if PseudoDamage &gt; 0
 {
  Health -= PseudoDamage;
  if CantBlink &lt;= 0
  {
   Blink = BlinkTime;
   CantBlink = CantBlinkTime;
  }
 }

 if StopPseudo &amp;&amp; Health &gt; 0 &amp;&amp; !other.Invincible &amp;&amp; CanHurt
 {
  if other.State != other.BALL &amp;&amp; other.SuperBall != 1
  other.State = other.HURT;
  other.Spinning = false;
  other.image_index = 0;
  other.yVel = yPush;
  other.xVel = xPush * PushDir;
  global.Energy -= Damage * dmult();
  if Damage != 0 other.Invincible = 60;
  other.Charge = 0;
  other.Dash = 0;
  other.StateTime = 0;
  sound_play_pos(sndHurt,other.x,other.y-15);
 }
 
 if PseudoDamage &gt; 0
 {
  other.ChargeIndex = 0;
  other.CantCharge = 20;
 }
}

// 

if Health &lt;= 0
{
 instance_destroy();
 event_user(0);
 if LogMenu != -1 &amp;&amp; LogIndex != -1
  add_log(LogMenu,LogIndex);
}
else
if CanHurt
{
 Invincibles = other.Invincible;
 
 if !other.Invincible &amp;&amp; other.State != other.HURT
 {
  global.Energy -= Damage * dmult();
  if Damage != 0 other.Invincible = 60;
  sound_play_pos(sndHurt,other.x,other.y-15);
 }   
 
 if (!Invincibles or IgnoreInvul) &amp;&amp; other.State != other.HURT
 {
  if other.State != other.BALL &amp;&amp; other.SuperBall != 1
  other.State = other.HURT;
  other.Spinning = false;
  other.image_index = 0;
  other.yVel = yPush;
  other.xVel = xPush * PushDir;
  other.Charge = 0;
  other.Dash = 0;
  other.StateTime = 0;
 }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
