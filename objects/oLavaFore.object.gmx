<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-300</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tex Coords

Factor[0] = .5;
Factor[1] = .5;

TopY[0] = room_height - 24; // Foreground -24
BottomY[0] = room_height + 4; //0

Sep = 1/4; // 1/12
Width = 64; // 32

Tex[0] = background_get_texture(txLava);
Tex[1] = background_get_texture(txLava2);

for (i=0;i&lt;=room_width/Width+1;i++)
{
 OffY[i] = 0;
 OffX[i] = 0;
}

WaveStep = 0;
WaveX = random(room_width);
WaveAmp = 0;
WaveDir = 0;
WaveMax = 12;
WaveForce = .25;

/// Mode

Mode = 1 ; // 0: No additive, has waves
           // 1: Additive, no waves
           
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.PausedGame exit;
/// Waves  &amp; Mode

/// Mode

if Mode == 1
{
 TopY[0] = room_height - 28;
}
else
{
 TopY[0] = room_height - 48;
}

/// Waves


if Mode == 0
{
 for (i=0;i&lt;=room_width/Width+1;i++)
 {
  Dist = max(0,WaveAmp-(point_distance(WaveX,0,i*Width,0)/3));
  OffY[i] = -Dist;
 }
 
 if WaveStep == 0
 {
  WaveStep = 1;
  WaveX = random(room_width);
  WaveDir = choose(1,-1);
 }
 
 if WaveStep == 1
 {
  WaveX += (WaveDir);
  WaveAmp += WaveForce;
  if WaveAmp &gt;= WaveMax
   WaveStep = 2; 
 }
 
 if WaveStep == 2
 {
  WaveX += (WaveDir);
  WaveAmp -= WaveForce
  if WaveAmp &lt;= 0
  {
   WaveStep = choose(-2,-30,-60,-120);
   WaveAmp = 0;
  }
 }
 
 if WaveStep &lt; 0 WaveStep++;
}
else
for (i=0;i&lt;=room_width/Width+1;i++)
{
 OffY[i] = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW FOREGROUND

draw_set_color(c_white);
draw_primitive_begin_texture(4,Tex[Mode]);
TopY[0] = room_height - 24; // Foreground


draw_set_blend_mode(bm_add); 
TexX = 0;

for (i=0;i&lt;=room_width/Width;i+=1)
{ 
 OffX[i] = floor(sin(global.TickP/60+i/8)*24*cos(global.TickP/60+i/8));
 OffXX[i] = floor(sin(global.TickP/60+(i+1)/8)*24*cos(global.TickP/60+(i+1)/8));
 
 X[i,0] = i*Width;
 Y[i,0] = TopY[0];
 X[i,1] = floor(i*Width + (i*Width-(view_xview+view_wview/2))*Factor[0]+OffX[i]);
 Off = floor((i+1)*Width+((i+1)*Width-(view_xview+view_wview/2))*Factor[0]+OffXX[i]);
 Y[i,1] = BottomY[0];
 Y[i,2] = BottomY[0];
 
 TexXT = TexX;
 TexXT += Sep;
 if TexXT &gt;= 1/2
  TexXT = 0;
 
 draw_vertex_texture(X[i,0],Y[i,0]+OffY[i],TexX,0);
 draw_vertex_texture(X[i,1],Y[i,1],TexX,1);
 draw_vertex_texture(Off,Y[i,2],TexXT,1);
 
 draw_vertex_texture(X[i,0],Y[i,0]+OffY[i],TexX,0);
 draw_vertex_texture(X[i,0]+Width,Y[i,0]+OffY[i+1],TexXT,0);
 draw_vertex_texture(Off,Y[i,2],TexXT,1);     
 
 // bottom
 
/* draw_vertex_texture(X[i,1],Y[i,1],TexX,0);
 draw_vertex_texture(X[i,1],room_height+56,TexX,1);
 draw_vertex_texture(Off,room_height+56,TexXT,1);
 
 draw_vertex_texture(X[i,1],Y[i,1],TexX,0);
 draw_vertex_texture(Off,Y[i,1],TexXT,0);
 draw_vertex_texture(Off,room_height+56,TexXT,1);      */
 
 TexX += Sep;
 if TexX &gt;= 1/2
  TexX = 0;
}

draw_primitive_end(); 
draw_set_blend_mode(bm_add); 
draw_rectangle_colour(0,view_hview,room_width,BottomY[0]-1,make_color_rgb(255,64,32),make_color_rgb(255,64,32),c_black,c_black,0);
draw_rectangle_colour(0,view_hview,room_width,view_hview-96,c_black,c_black,c_red,c_red,0);       
draw_set_blend_mode(bm_normal);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
