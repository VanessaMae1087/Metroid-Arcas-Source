<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSubscreen</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause the game

global.PausedGame = 1;

// Begin animation

Animation = -33;
Destroy = 0;

Timer = 30;

SuitAlpha = 1;

PrevL = global.Power[0,P_LBEAM];
PrevI = global.Power[0,P_IBEAM];
PrevW = global.Power[0,P_WBEAM];
PrevP = global.Power[0,P_HBEAM];

// Menu

Suite = global.Suit;
newSuite = global.Suit;
SuitAnim = 128;
Sweet = 0;

Menu = 0;
ForcedMenu = -1;

// Alphas

MenuAlpha[0] = 0;
MenuAlpha[1] = 0;
MenuAlpha[2] = 0;
MenuAlpha[3] = 0;

MAP_DEPTH = depth - 2;

// Map

// LOOKUP TABLE

MapX = 0;
MapY = 0;

DestX = view_xview+view_wview/2-24
DestY = view_yview+view_hview/2-24
MapX += (DestX-(view_xview+global.MapX*8))/8
MapY += (DestY-(view_yview+global.MapY*8))/8

LeftMostTile = 32;
TopMostTile = 32;
RightMostTile = 0;
BottomMostTile = 0;

global.DisplayWorld = global.MapWorld;

for (i=0;i&lt;32;i++)
for (j=0;j&lt;32;j++)
{
 buffer_seek(oControl.MapBuffer, buffer_seek_start, 512+(global.DisplayWorld&lt;&lt;10)+(global.DisplayWorld&lt;&lt;12)+((i+(j&lt;&lt;5))*5));  
 
 for (bb=0;bb&lt;5;bb++)
 {
  Byte[bb] = buffer_read(oControl.MapBuffer,buffer_u8)
 }
  
 MainByte = (Byte[0]&lt;&lt;32)+(Byte[1]&lt;&lt;24)+(Byte[2]&lt;&lt;16)+(Byte[3]&lt;&lt;8)+Byte[4];  
 
 if MainByte &gt; 0
 {
  if map_get_disc(global.DisplayWorld,i,j) != 0
  {  
   if i &lt; LeftMostTile LeftMostTile = i;
   if i &gt; RightMostTile RightMostTile = i;
   if j &lt; TopMostTile TopMostTile = j;
   if j &gt; BottomMostTile BottomMostTile = j;
 
   TileColor = map_get_info(MainByte, 1);
   for (dd=0;dd&lt;4;dd++)
    TileDoor[dd] = map_get_info(MainByte, 2+dd);
   
   TileMark = map_get_info(MainByte, 6);
   
   if map_get_disc(global.DisplayWorld,i,j) == 1
   {
    TileMark = 0;
    for (dd=0;dd&lt;4;dd++)
     TileDoor[dd] = min(TileDoor[dd],1);
    TileColor = 4; 
   }
  
   TTMark[i,j] = TileMark;
   TTDoor0[i,j] = (TileDoor[0]&lt;&lt;2);
   TTDoor1[i,j] = (TileDoor[1]&lt;&lt;2)+1;
   TTDoor2[i,j] = (TileDoor[2]&lt;&lt;2)+2;
   TTDoor3[i,j] = (TileDoor[3]&lt;&lt;2)+3;
   TTColor[i,j] = TileColor;   
  }
  
  TTVisible[i,j] = map_get_disc(global.DisplayWorld,i,j);
  TTDraw[i,j] = 1;
 }
 else
 TTDraw[i,j] = 0;
}

Cursor[0] = 0;
Cursor[1] = 0;
Cursor[2] = 0;
Cursor[3] = 0;

Held[0] = 0;
Held[1] = 0;
Held[2] = 0;
Held[3] = 0;

CanPlay = 0;

global.MapColor = c_white;

sound_play_pos(sndSubOpen,view_xview+view_wview/2,view_yview+view_hview/2);

// ForcedMap

Sweeped = 0;
Sweep = -MapY - 4;
SweepDraw = -32;
SweepAlpha = 0;

// ForcedItem

TextX = 30;
TextY = view_hview - 37;
ForcedItem = -1;
StringDone = 0;

// SUBSCREEN

CanMorph = 1;
CanGrip = 1;
CanZero = 1;
CanPower = 1;

TextString = "";
TextLength = 0;
TextGo = 0;
// 45 is the limit per line

OffXX[U_BOMB] = 10;
OffYY[U_BOMB] = 24;
TabH[U_BOMB] = 10;

OffXX[U_MISSILE] = 10;
OffYY[U_MISSILE] = 64;
TabH[U_MISSILE] = 10;

OffXX[U_BEAM] = 10;
OffYY[U_BEAM] = 126;
TabH[U_BEAM] = 10;

OffXX[U_SUIT] = view_wview - 10;
OffYY[U_SUIT] = 24;
TabH[U_SUIT] = 10;

OffXX[U_MISC] = view_wview - 10;
OffYY[U_MISC] = 69;
TabH[U_MISC] = 10;

OffXX[U_BOOTS] = view_wview - 10;
OffYY[U_BOOTS] = 154;
TabH[U_BOOTS] = 10;

mxOff[U_BOMB] = -1;
myOff[U_BOMB] = -4;
mxOff[U_MISSILE] = -1;
myOff[U_MISSILE] = -4;
mxOff[U_BEAM] = -1;
myOff[U_BEAM] = -4;
mxOff[U_SUIT] = -58;
myOff[U_SUIT] = -4;
mxOff[U_MISC] = -82;
myOff[U_MISC] = -4;
mxOff[U_BOOTS] = -82;
myOff[U_BOOTS] = -4;

SLen[0] = 4;
SLen[1] = 3;
SLen[2] = 4;
SLen[3] = 4;
SLen[4] = 4;
SLen[5] = 4;
SLen[6] = 4;
SLen[7] = 4;
SLen[8] = 4;
SLen[9] = 4;
SLen[10] = 5;

Select = U_BEAM;
Choice = 0;
Overlay = .8;
CurrentPower = -1;

MenuJ = 0;

for (j=0;j&lt;7;j++)
for (i=0;i&lt;5+1*(j mod 2 == 1);i++)
{
 HexX[i,j] = 112 + i*24  - (12*(j mod 2 == 1));
 HexY[i,j] = 52 + 22*j 
 HexA[i,j] = random(1);
 HexS[i,j] = choose(0,1);
}


for (i=0;i&lt;24;i++)
for (ii=0;ii&lt;3;ii++)
{
 Desc[i,ii] = "";
 Texts[i] = 1;
}
 
DescLine = 0;
 
Desc[P_MISSILE,0] = "Hold $9 and press $5 to fire @4Missiles@0.";
Texts[P_MISSILE] = 1;
Desc[P_SMISSILE,0] = "Press $7 to switch to @2Super Missiles@0.";
Desc[P_SMISSILE,1] = "Deals @33X@0 the damage of normal @4Missiles@0.";
Texts[P_SMISSILE] = 2;

Desc[P_GRIP,0] = "Grab and hang from @3ledges and corners@0."
Texts[P_GRIP] = 1;

Desc[P_MORPHBALL,0] = "Press $3 twice to @3morph@0 into a @3ball@0 and"
Desc[P_MORPHBALL,1] = "traverse narrow gaps and passageways."
Texts[P_MORPHBALL] = 2;
                              
Desc[P_SPEEDBOOSTER,0] = "Run until @3speed boost@0 begins to break"
Desc[P_SPEEDBOOSTER,1] = "certain blocks and damage enemies."
Texts[P_SPEEDBOOSTER] = 2;

Desc[P_HIJUMP,0] = "@1Jump height@0 increased significantly."
Texts[P_HIJUMP] = 1;

Desc[P_VSUIT,0] = "Take @520%@0 reduced damage. Nullifies the"
Desc[P_VSUIT,1] = "effects of @5extreme heat@0 and @5acid@0."
Desc[P_GSUIT,0] = "Take @520%@0 reduced damage. Nullifies movement"
Desc[P_GSUIT,1] = "impairing effects from liquids.";
Texts[P_GSUIT] = 2;
Texts[P_VSUIT] = 2;

Desc[P_SPRINGBALL,0] = "Press $4 to jump while in @3ball@0 mode."
Texts[P_SPRINGBALL] = 1;

Desc[P_SCREW,0] = "@1Somersault@0 to damage enemies and break"
Desc[P_SCREW,1] = "specific blocks."
Texts[P_SCREW] = 2;

Desc[P_BOMB,0] = "Press $5 in @3ball@0 mode to lay down @4bombs@0.";
Texts[P_BOMB] = 1;

Desc[P_PBEAM,0] = "Press $5 to fire standard @3power beam@0.";
Texts[P_PBEAM] = 1;
Desc[P_LBEAM,0] = "@4Beam@0 firing distance increased.";
Texts[P_LBEAM] = 1;
Desc[P_CBEAM,0] = "Press and hold $5 to charge up @4beam@0.";
Desc[P_CBEAM,1] = "@1Somersault@0 while charged to damage enemies.";
Texts[P_CBEAM] = 2;
Desc[P_IBEAM,0] = "Beam now @1freezes@0 enemies in place.";
Desc[P_IBEAM,1] = "@1Frozen@0 enemies can be safely stood on.";
Texts[P_IBEAM] = 2;
Desc[P_WBEAM,0] = "Beam now penetrates walls and solid objects.";
Desc[P_WBEAM,1] = "Additionally, beam width increased dramatically.";
Texts[P_WBEAM] = 2;
Desc[P_HBEAM,0] = "Beam can pierce through enemies.";
Texts[P_HBEAM] = 1;

Desc[P_HEATSINK,0] = "Provides resistance to @5lava@0 damage."
Texts[P_HEATSINK] = 1;

// LOGBOOK

LogOff[0] = 0;
LogOff[1] = 0;
LogOff[2] = 0;
LogIndex[0] = 0;
LogIndex[1] = 0;
LogIndex[2] = 0;

LogSprite[0] = sLogIndex;
LogSprite[1] = sLogIndex2;
LogSprite[2] = sLogIndex3;


LogNumber = 16;
LogMenu = 0;

LHeld[1] = 0;


 StartSuit = 3;
 if global.Power[P_PSUIT]
  StartSuit = 0;
 if global.Power[P_VSUIT]
  StartSuit = 1;
 if global.Power[P_GSUIT]
  StartSuit = 2;

LogSurface = surface_create(256,256);
log_refresh();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Unpause

tile_layer_delete(MAP_DEPTH);
tile_layer_delete(MAP_DEPTH-1);
tile_layer_delete(MAP_DEPTH-2);

global.PausedGame = 0;

if ForcedMenu == 1 &amp;&amp; (ForcedItem == P_VSUIT or ForcedItem == P_GSUIT)
{
 oPlayer.x = oSuitPosition.x;
 oPlayer.y = oSuitPosition.y;
 oControl.GotSuit = 180;
 oPlayer.State = oPlayer.IDLE;
 oPlayer.xVel = 0;
 oPlayer.yVel = 0;
 d = instance_create(oPlayer.x,oPlayer.y-17,oSuitEffect);
 d . Color = c_orange;
 if ForcedItem == P_GSUIT
  d . Color = c_fuchsia;
}

if PrevL != global.Power[P_LBEAM]
or PrevW != global.Power[P_WBEAM]
or PrevI != global.Power[P_IBEAM]
or PrevP != global.Power[P_HBEAM]
 oPlayer.CType = 0;





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if CurrentPower == P_GSUIT or CurrentPower == P_VSUIT
{
 Suite = 3;
 if global.Power[P_PSUIT]
  Suite = 0;
 if global.Power[P_VSUIT]
  Suite = 1;
 if global.Power[P_GSUIT]
  Suite = 2;
  
 global.Power[P_PSUIT] = 1;
}

global.Power[CurrentPower] = 1;

if CurrentPower == P_GSUIT or CurrentPower == P_VSUIT
{
 newSuite = 3;
 if global.Power[P_PSUIT]
  newSuite = 0;
 if global.Power[P_VSUIT]
  newSuite = 1;
 if global.Power[P_GSUIT]
  newSuite = 2;
  
 if newSuite != Suite{
 SuitAlpha = 0;SuitAnim = 0;}
}
   
sound_play_pos(sndOn,view_xview+view_wview/2,view_yview+view_hview/2);   

  MenuJ = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Animate and destroy

if Destroy == 0
{
 Animation = min(Animation+3,0);
}
else
{
 Animation = max(Animation-3,-33);
 if Animation == -33
 {
  instance_destroy();
 
  StartSuit2 = 3;
  if global.Power[P_PSUIT]
   StartSuit2 = 0;
  if global.Power[P_VSUIT]
   StartSuit2= 1;
  if global.Power[P_GSUIT]
   StartSuit2 = 2;
  
  if StartSuit2 != StartSuit
   oPlayer.WhiteFade = 1.5;
 }
}

Timer --;

if DescLine &lt; 0 DescLine=0;
if CurrentPower &lt; 0 CurrentPower=0;

// Destroy
if (global.KeyPressed[0,KEY_ENTER] or (ForcedMenu == 0 &amp;&amp; global.KeyPressed[0,KEY_A]))
if Animation == 0 &amp;&amp; !Destroy
if !(ForcedMenu == 0 &amp;&amp; !Sweeped)
&amp;&amp; !(ForcedMenu == 1 &amp;&amp; !StringDone)
&amp;&amp; !(ForcedMenu != -1 &amp;&amp; Timer &gt; 0)
{
 Destroy = 1;
 sound_play_pos(sndSubClose,view_xview+view_wview/2,view_yview+view_hview/2);
}

// Menu Alphas

for (i=0;i&lt;4;i++)
{
 MenuAlpha[i] = max(MenuAlpha[i] - .1, 0);
}

MenuAlpha[Menu] = min(MenuAlpha[Menu] + .2, 1);

// Switch menu

if ForcedMenu == -1
{
 if global.KeyPressed[0,KEY_POWER]
 {
  Menu += 1;
  if Menu &gt; 3
   Menu = 0;
  sound_play_pos(sndSubChange,view_xview+view_wview/2,view_yview+view_hview/2);
 }
 
 if global.KeyPressed[0,KEY_MISSILE]
 {
  Menu -= 1;
  if Menu &lt; 0
   Menu = 3;
  sound_play_pos(sndSubChange,view_xview+view_wview/2,view_yview+view_hview/2);
 } 
}

// Cursor anim

for (i=0;i&lt;4;i++)
{
 if Cursor[i] &gt; 0 Cursor[i]--;
}

if Menu != 0
for (i=0;i&lt;4;i++)
{
 Held[i] = 0;
}

// Forcedmap == 0

if ForcedMenu == 0
if Sweep &lt; 32
if !Sweeped
{
 if floor(Sweep) == Sweep &amp;&amp; Sweep &gt;= 0
 {
  for (i=0;i&lt;32;i++)
  {
   buffer_seek(oControl.MapBuffer, buffer_seek_start, 512+(global.DisplayWorld&lt;&lt;10)+(global.DisplayWorld&lt;&lt;12)+((i+(Sweep&lt;&lt;5))*5));  
   
   for (bb=0;bb&lt;5;bb++)
   {
    Byte[bb] = buffer_read(oControl.MapBuffer,buffer_u8)
   }
    
   MainByte = (Byte[0]&lt;&lt;32)+(Byte[1]&lt;&lt;24)+(Byte[2]&lt;&lt;16)+(Byte[3]&lt;&lt;8)+Byte[4];   
   
   if map_get_info(MainByte,1) == 1
   if map_get_disc(global.DisplayWorld,i,Sweep) == 0
   {
    map_set_disc(global.DisplayWorld,i,Sweep, 1);
    
    buffer_seek(oControl.MapBuffer, buffer_seek_start, 512+(global.DisplayWorld&lt;&lt;10)+(global.DisplayWorld&lt;&lt;12)+((i+(Sweep&lt;&lt;5))*5));  
    
    for (bb=0;bb&lt;5;bb++)
    {
     Byte[bb] = buffer_read(oControl.MapBuffer,buffer_u8)
    }
     
    MainByte = (Byte[0]&lt;&lt;32)+(Byte[1]&lt;&lt;24)+(Byte[2]&lt;&lt;16)+(Byte[3]&lt;&lt;8)+Byte[4];  
    
    if MainByte &gt; 0
    {
     if i &lt; LeftMostTile LeftMostTile = i;
     if i &gt; RightMostTile RightMostTile = i;
     if Sweep &lt; TopMostTile TopMostTile = Sweep;
     if Sweep &gt; BottomMostTile BottomMostTile = Sweep;
   
     TileColor = map_get_info(MainByte, 1);
     for (dd=0;dd&lt;4;dd++)
      TileDoor[dd] = map_get_info(MainByte, 2+dd);
     
     TileMark = map_get_info(MainByte, 6);
 
     TileMark = 0;
     for (dd=0;dd&lt;4;dd++)
      TileDoor[dd] = min(TileDoor[dd],1);
     TileColor = 4; 
     
     TTMark[i,Sweep] = TileMark;
     TTDoor0[i,Sweep] = (TileDoor[0]&lt;&lt;2);
     TTDoor1[i,Sweep] = (TileDoor[1]&lt;&lt;2)+1;
     TTDoor2[i,Sweep] = (TileDoor[2]&lt;&lt;2)+2;
     TTDoor3[i,Sweep] = (TileDoor[3]&lt;&lt;2)+3;
     TTColor[i,Sweep] = TileColor;   
    
     TTVisible[i,Sweep] = map_get_disc(global.DisplayWorld,i,Sweep);
     TTDraw[i,Sweep] = 1;
    }
   }
  }
 }
 Sweep += 1/8;
 SweepDraw += 1;
 if Sweep &gt;= 32
 {
  Sweeped = 1;
 }
}



// Subscreen selections

//Bomb     Suit
//Missile  Misc
//Beams    Boots

if Menu == 1 &amp;&amp; !Destroy
{
 PrevSelect = Select;
 PrevChoice = Choice;
 
 LeftString = global.Unlock[U_BOMB] + global.Unlock[U_MISSILE] + global.Unlock[U_BEAM];
 RightString = global.Unlock[U_SUIT] + global.Unlock[U_MISC] + global.Unlock[U_BOOTS];
 
 if Select == U_BOMB or Select == U_MISSILE or Select == U_BEAM
  Side = 0;
  else
  Side = 1;
  
 if Side == 0
 {
  if Select == U_BOMB
   TrueChoice = Choice;
  if Select == U_MISSILE
   TrueChoice = Choice + string_length(global.Unlock[U_BOMB]);
  if Select == U_BEAM
   TrueChoice = Choice + string_length(global.Unlock[U_BOMB]) + string_length(global.Unlock[U_MISSILE]);  
 }
 else
 {
  if Select == U_SUIT
   TrueChoice = Choice;
  if Select == U_MISC
   TrueChoice = Choice + string_length(global.Unlock[U_SUIT]);
  if Select == U_BOOTS
   TrueChoice = Choice + string_length(global.Unlock[U_SUIT]) + string_length(global.Unlock[U_MISC]);  
 }
  
 if string_length(LeftString) == 0 or ((global.KeyPressed[0,KEY_RIGHT] or global.KeyPressed[0,KEY_LEFT]) &amp;&amp; ForcedMenu != 1)
 {
  if Side == 0
  {
   FinalChoice = min(TrueChoice,string_length(RightString)-1);
   
   if FinalChoice &lt; string_length(global.Unlock[U_SUIT])
   {
    Choice = FinalChoice;
    Select = U_SUIT;
   }
   else
   if FinalChoice &lt; string_length(global.Unlock[U_SUIT]) + string_length(global.Unlock[U_MISC])
   {
    Choice = FinalChoice - string_length(global.Unlock[U_SUIT]);
    Select = U_MISC;
   }
   else
   if FinalChoice &lt; string_length(global.Unlock[U_SUIT]) + string_length(global.Unlock[U_MISC]) + string_length(global.Unlock[U_BOOTS])
   {
    Choice = FinalChoice - string_length(global.Unlock[U_SUIT]) - string_length(global.Unlock[U_MISC]);
    Select = U_BOOTS;
   }   
  }
  TextString = "";
  TextLength = 0;
  TextGo = 0;
 }
 
 if string_length(RightString) == 0 or ((global.KeyPressed[0,KEY_RIGHT] or global.KeyPressed[0,KEY_LEFT]) &amp;&amp; ForcedMenu != 1)
 {
  if Side == 1
  {
   FinalChoice = min(TrueChoice,string_length(LeftString)-1);
   
   if FinalChoice &lt; string_length(global.Unlock[U_BOMB])
   {
    Choice = FinalChoice;
    Select = U_BOMB;
   }
   else
   if FinalChoice &lt; string_length(global.Unlock[U_BOMB]) + string_length(global.Unlock[U_MISSILE])
   {
    Choice = FinalChoice - string_length(global.Unlock[U_BOMB]);
    Select = U_MISSILE;
   }
   else
   if FinalChoice &lt; string_length(global.Unlock[U_BOMB]) + string_length(global.Unlock[U_MISSILE]) + string_length(global.Unlock[U_BEAM])
   {
    Choice = FinalChoice - string_length(global.Unlock[U_BOMB]) - string_length(global.Unlock[U_MISSILE]);
    Select = U_BEAM;
   }   
  }
  TextString = "";
  TextLength = 0;
  TextGo = 0;
 }
 
 // SELECT DOWN
 
 if global.KeyPressed[0,KEY_DOWN] &amp;&amp; ForcedMenu != 1
 {
  if Side == 0
  {
   FinalChoice = TrueChoice + 1;
   if FinalChoice &gt;= string_length(LeftString)
    FinalChoice = 0; 
   
   if FinalChoice &lt; string_length(global.Unlock[U_BOMB])
   {
    Choice = FinalChoice;
    Select = U_BOMB;
   }
   else
   if FinalChoice &lt; string_length(global.Unlock[U_BOMB]) + string_length(global.Unlock[U_MISSILE])
   {
    Choice = FinalChoice - string_length(global.Unlock[U_BOMB]);
    Select = U_MISSILE;
   }
   else
   if FinalChoice &lt; string_length(global.Unlock[U_BOMB]) + string_length(global.Unlock[U_MISSILE]) + string_length(global.Unlock[U_BEAM])
   {
    Choice = FinalChoice - string_length(global.Unlock[U_BOMB]) - string_length(global.Unlock[U_MISSILE]);
    Select = U_BEAM;
   }    
  }
  if Side == 1
  {
   FinalChoice = TrueChoice + 1;
   if FinalChoice &gt;= string_length(RightString)
    FinalChoice = 0; 
   
   if FinalChoice &lt; string_length(global.Unlock[U_SUIT])
   {
    Choice = FinalChoice;
    Select = U_SUIT;
   }
   else
   if FinalChoice &lt; string_length(global.Unlock[U_SUIT]) + string_length(global.Unlock[U_MISC])
   {
    Choice = FinalChoice - string_length(global.Unlock[U_SUIT]);
    Select = U_MISC;
   }
   else
   if FinalChoice &lt; string_length(global.Unlock[U_SUIT]) + string_length(global.Unlock[U_MISC]) + string_length(global.Unlock[U_BOOTS])
   {
    Choice = FinalChoice - string_length(global.Unlock[U_SUIT]) - string_length(global.Unlock[U_MISC]);
    Select = U_BOOTS;
   }   
  }
  TextString = "";
  TextLength = 0;
  TextGo = 0;
 }
 
 // SELECT UP
 
 if global.KeyPressed[0,KEY_UP] &amp;&amp; ForcedMenu != 1
 {
  if Side == 0
  {
   FinalChoice = TrueChoice - 1;
   if FinalChoice &lt; 0
    FinalChoice = string_length(LeftString) - 1; 
   
   if FinalChoice &lt; string_length(global.Unlock[U_BOMB])
   {
    Choice = FinalChoice;
    Select = U_BOMB;
   }
   else
   if FinalChoice &lt; string_length(global.Unlock[U_BOMB]) + string_length(global.Unlock[U_MISSILE])
   {
    Choice = FinalChoice - string_length(global.Unlock[U_BOMB]);
    Select = U_MISSILE;
   }
   else
   if FinalChoice &lt; string_length(global.Unlock[U_BOMB]) + string_length(global.Unlock[U_MISSILE]) + string_length(global.Unlock[U_BEAM])
   {
    Choice = FinalChoice - string_length(global.Unlock[U_BOMB]) - string_length(global.Unlock[U_MISSILE]);
    Select = U_BEAM;
   }    
  }
  if Side == 1
  {
   FinalChoice = TrueChoice - 1;
   if FinalChoice &lt; 0
    FinalChoice = string_length(RightString) - 1; 
   
   if FinalChoice &lt; string_length(global.Unlock[U_SUIT])
   {
    Choice = FinalChoice;
    Select = U_SUIT;
   }
   else
   if FinalChoice &lt; string_length(global.Unlock[U_SUIT]) + string_length(global.Unlock[U_MISC])
   {
    Choice = FinalChoice - string_length(global.Unlock[U_SUIT]);
    Select = U_MISC;
   }
   else
   if FinalChoice &lt; string_length(global.Unlock[U_SUIT]) + string_length(global.Unlock[U_MISC]) + string_length(global.Unlock[U_BOOTS])
   {
    Choice = FinalChoice - string_length(global.Unlock[U_SUIT]) - string_length(global.Unlock[U_MISC]);
    Select = U_BOOTS;
   }   
  }
  
  TextString = "";
  TextLength = 0;
  TextGo = 0;
 }
 
 switch (Select)
 {
  case U_BOMB:
   Chr = string_char_at(global.Unlock[U_BOMB],Choice+1);
   if Chr == "N"
    CurrentPower = P_BOMB;
   if Chr == "P"
    CurrentPower = P_PBOMB;
  break; 
  
  case U_MISSILE:
   Chr = string_char_at(global.Unlock[U_MISSILE],Choice+1);
   if Chr == "N"
    CurrentPower = P_MISSILE;
   if Chr == "S"
    CurrentPower = P_SMISSILE;
  break; 
  
  case U_BEAM:
   Chr = string_char_at(global.Unlock[U_BEAM],Choice+1);
   if Chr == "P"
    CurrentPower = P_PBEAM;
   if Chr == "L"
    CurrentPower = P_LBEAM;
   if Chr == "I"
    CurrentPower = P_IBEAM;  
   if Chr == "W"
    CurrentPower = P_WBEAM;  
   if Chr == "H"
    CurrentPower = P_HBEAM;  
   if Chr == "C"
    CurrentPower = P_CBEAM;          
  break;
  
  case U_SUIT:
   Chr = string_char_at(global.Unlock[U_SUIT],Choice+1);
   if Chr == "P"
    CurrentPower = P_PSUIT;
   if Chr == "V"
    CurrentPower = P_VSUIT;
   if Chr == "G"
    CurrentPower = P_GSUIT;    
  break;
  
  case U_MISC:
   Chr = string_char_at(global.Unlock[U_MISC],Choice+1);
   if Chr == "B"
    CurrentPower = P_MORPHBALL;
   if Chr == "G"
    CurrentPower = P_GRIP;
   if Chr == "S"
    CurrentPower = P_SCREW;  
   if Chr == "P"
    CurrentPower = P_SPRINGBALL;   
   if Chr == "H"
    CurrentPower = P_HEATSINK;          
  break;
  
  case U_BOOTS:
   Chr = string_char_at(global.Unlock[U_BOOTS],Choice+1);
   if Chr == "S"
    CurrentPower = P_SPEEDBOOSTER;
   if Chr == "H"
    CurrentPower = P_HIJUMP;
   if Chr == "P"
    CurrentPower = P_SPACE;       
  break;    
 } 
 
 if global.KeyPressed[0,KEY_B] &amp;&amp; ForcedMenu != 1
 {
  if !(CanMorph == 0 &amp;&amp; global.Power[P_MORPHBALL] == 1 &amp;&amp; CurrentPower == P_MORPHBALL)
  &amp;&amp; !(CanGrip == 0 &amp;&amp; global.Power[P_GRIP] == 1 &amp;&amp; CurrentPower == P_GRIP)
  &amp;&amp; !(CanZero == 0 &amp;&amp; global.Power[P_PSUIT] == 1 &amp;&amp; CurrentPower == P_PSUIT) 
  &amp;&amp; !(CanPower == 0 &amp;&amp; global.Power[P_PSUIT] == 0 &amp;&amp; CurrentPower == P_PSUIT)    
  &amp;&amp; !((CurrentPower == P_VSUIT or CurrentPower == P_GSUIT) &amp;&amp; global.Power[P_PSUIT] == 0)
  {      
   if CurrentPower == P_PSUIT or CurrentPower == P_GSUIT or CurrentPower == P_VSUIT
   {
    Suite = 3;
    if global.Power[P_PSUIT]
     Suite = 0;
    if global.Power[P_VSUIT]
     Suite = 1;
    if global.Power[P_GSUIT]
     Suite = 2;
   }
   
   global.Power[CurrentPower] = !global.Power[CurrentPower];

   if CurrentPower == P_PSUIT
   {
    global.Power[P_VSUIT] = 0;
    global.Power[P_GSUIT] = 0;
   }

   
   if CurrentPower == P_PSUIT or CurrentPower == P_GSUIT or CurrentPower == P_VSUIT
   {
    newSuite = 3;
    if global.Power[P_PSUIT]
     newSuite = 0;
    if global.Power[P_VSUIT]
     newSuite = 1;
    if global.Power[P_GSUIT]
     newSuite = 2;
    if newSuite != Suite{
    SuitAlpha = 0;SuitAnim = 0;}
   }
   
   if global.Power[CurrentPower] == 0
   sound_play_pos(sndOff,view_xview+view_wview/2,view_yview+view_hview/2);
   else
   sound_play_pos(sndOn,view_xview+view_wview/2,view_yview+view_hview/2);   
  }
  else
  sound_play_pos(sndCantOnOff,view_xview+view_wview/2,view_yview+view_hview/2);  
 }
 
 if PrevSelect != Select or PrevChoice != Choice
 {
  sound_play_pos(sndSubMove,view_xview+view_wview/2,view_yview+view_hview/2);  
  MenuJ = 0;
 }
}

if Menu == 1 &amp;&amp; !(ForcedMenu == 1 &amp;&amp; global.Power[CurrentPower] == 0) &amp;&amp; MenuAlpha[1] &gt;= 1
{
 TextString = Desc[CurrentPower,DescLine];
 
 if global.KeyPressed[0,KEY_A]
 {
  if TextGo == 0
  {
   if TextLength != string_length(Desc[CurrentPower,DescLine])
   {
    TextGo = 1;
    DescLine = 0;
    TextString = Desc[CurrentPower,DescLine];
    TextLength = 0;
   }
   else
   {
    if DescLine &lt; Texts[CurrentPower] - 1
    {
     DescLine ++;
     TextGo = 1;
     TextString = Desc[CurrentPower,DescLine];
     TextLength = 0;
    }
    else
    {
     TextString = "";
     TextLength = 0;
     TextGo = 0;    
     DescLine = 0;
     if ForcedMenu == 1 &amp;&amp; !Destroy &amp;&amp; Timer &lt;= 1
     {
      StringDone = 1;
      Destroy = 1;
      sound_play_pos(sndSubClose,view_xview+view_wview/2,view_yview+view_hview/2);
      for (i=0;i&lt;20;i++)
      for (ii=0;ii&lt;3;ii++)
      {
       Desc[i,ii] = "";
       Texts[i] = 1;
      }
     }
    }
   }
  }
  else
  if TextLength &lt; string_length(Desc[CurrentPower,DescLine])
  {
   TextLength = string_length(Desc[CurrentPower,DescLine]);
   TextGo = 0;
  }
 }
 
 if TextGo == 0 &amp;&amp; TextLength = 0
 {
  TextGo = 1;
  DescLine = 0;
  TextString = Desc[CurrentPower,DescLine];
  TextLength = 0; 
 }
}

if MenuAlpha[1] &lt;= 0
{
     TextString = "";
     TextLength = 0;
     TextGo = 0;    
     DescLine = 0;
}

if ForcedMenu == 1
switch ForcedItem
{
 case P_MORPHBALL:
  Select = U_MISC;
  Choice = string_pos("B",global.Unlock[U_MISC]) - 1;
 break;
 
 case P_GRIP:
  Select = U_MISC;
  Choice = string_pos("G",global.Unlock[U_MISC]) - 1;
 break;
 
 case P_SPEEDBOOSTER:
  Select = U_BOOTS;
  Choice = string_pos("S",global.Unlock[U_BOOTS]) - 1;
 break;
 
 case P_HIJUMP:
  Select = U_BOOTS;
  Choice = string_pos("H",global.Unlock[U_BOOTS]) - 1;
 break;
 
 case P_VSUIT:
  Select = U_SUIT;
  Choice = string_pos("V",global.Unlock[U_SUIT]) - 1;
 break;
 
 case P_GSUIT:
  Select = U_SUIT;
  Choice = string_pos("G",global.Unlock[U_SUIT]) - 1;
 break;

 case P_SPRINGBALL:
  Select = U_MISC;
  Choice = string_pos("P",global.Unlock[U_MISC]) - 1;
 break;
 
 case P_HEATSINK:
  Select = U_MISC;
  Choice = string_pos("H",global.Unlock[U_MISC]) - 1;
 break;
 
 case P_SCREW:
  Select = U_MISC;
  Choice = string_pos("S",global.Unlock[U_MISC]) - 1;
 break;
 
 case P_BOMB:
  Select = U_BOMB;
  Choice = string_pos("N",global.Unlock[U_BOMB]) - 1;
 break;
 
 case P_MISSILE:
  Select = U_MISSILE;
  Choice = string_pos("N",global.Unlock[U_MISSILE]) - 1;
 break;

 case P_SMISSILE:
  Select = U_MISSILE;
  Choice = string_pos("S",global.Unlock[U_MISSILE]) - 1;
 break;
 
 case P_IBEAM:
  Select = U_BEAM;
  Choice = string_pos("I",global.Unlock[U_BEAM]) - 1;
 break;
 case P_LBEAM:
  Select = U_BEAM;
  Choice = string_pos("L",global.Unlock[U_BEAM]) - 1;
 break;
 case P_WBEAM:
  Select = U_BEAM;
  Choice = string_pos("W",global.Unlock[U_BEAM]) - 1;
 break;
 case P_CBEAM:
  Select = U_BEAM;
  Choice = string_pos("C",global.Unlock[U_BEAM]) - 1;
 break;
 case P_HBEAM:
  Select = U_BEAM;
  Choice = string_pos("H",global.Unlock[U_BEAM]) - 1;
 break; 
}

// LOG


if Menu == 2
{
 if global.KeyPressed[0,KEY_LEFT]
 {
  LogMenu --;
  if LogMenu &lt; 0
   LogMenu = 2;
  sound_play_pos(sndSubLog,view_xview+view_wview/2,view_yview+view_hview/2);
  log_refresh();
 }
 if global.KeyPressed[0,KEY_RIGHT]
 {
  LogMenu ++;
  if LogMenu &gt; 2
   LogMenu = 0;
  sound_play_pos(sndSubLog,view_xview+view_wview/2,view_yview+view_hview/2);
  log_refresh();
 }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if view_current != 0 exit;

// Get values from Animation

Alpha = 1 + Animation/32;
TabAlpha = 1;

OffX = Animation;
OffY = Animation/1.6;

// Draw overlay

draw_set_color(make_color_rgb(0,42,0));
draw_set_alpha(Alpha/1.155);
draw_rectangle(view_xview,view_yview,view_xview+view_wview,view_yview+view_hview,0);
draw_set_alpha(1);

// Draw main screen

draw_sprite_ext(sSubscreen,0,view_xview,view_yview,1,1,0,image_blend,Alpha);

// Draw top/bot

draw_sprite_ext(sSubBottom,0,view_xview + view_wview/2,view_yview-OffY+view_hview,1,1,0,image_blend,TabAlpha);
draw_sprite_ext(sSubTop,0,view_xview + view_wview/2,view_yview+OffY,1,1,0,image_blend,TabAlpha);
draw_sprite_ext(sSubMenu,Menu,view_xview + view_wview/2,view_yview+OffY,1,1,0,image_blend,TabAlpha);

// Draw tabs

draw_sprite_ext(sSubTab,Menu,view_xview + OffX,view_yview + OffY,1,1,0,image_blend,TabAlpha);
draw_sprite_ext(sSubTab,Menu+4,view_xview + view_wview - OffX - 45,view_yview + OffY,1,1,0,image_blend,TabAlpha);

// Draw options

draw_sprite_ext(sSubOptions,Menu,view_xview + view_wview/2,view_yview-OffY+view_hview,1,1,0,image_blend,TabAlpha);



// Final Alphas

for (i=0;i&lt;4;i++)
{
 FinalAlpha[i] = MenuAlpha[i]*Alpha;
}

// Menu specific

// MAP

if CanPlay CanPlay --; // Map sound

if MenuAlpha[0] &gt; 0
{
 draw_sprite_ext(sSubMap,0,view_xview,view_yview,1,1,0,image_blend,FinalAlpha[0]);
 MapOff = (1-(FinalAlpha[0]))*8;
 global.MapColor = merge_color(c_black,c_white,.75+.25*sin(global.Tick/30));
 
 for (i=0;i&lt;32;i++)
 for (j=0;j&lt;32;j++)
 {  
  if TTDraw[i,j]
  if TTVisible[i,j]
  {
   XX = view_xview[0] + i*8 + 20;
   YY = view_yview[0] + j*8 + 31;
   XX += MapX*8;
   YY += MapY*8;
 
   if XX &gt;= view_xview[0] + 20 
   &amp;&amp; XX &lt; view_xview[0] + view_wview[0] - 20
   &amp;&amp; YY &gt;= view_yview[0] + 31
   &amp;&amp; YY &lt; view_yview[0] + view_hview[0] - 25
   &amp;&amp; !(XX &gt;= view_xview[0] + view_wview[0] - 84 &amp;&amp; YY &lt; view_yview[0] + 47)  
   {        
    draw_sprite_ext(sMMapColorSub, TTColor[i,j], XX, YY, 1, 1, 0, global.MapColor, FinalAlpha[0]);
    draw_sprite_ext(sMMapSides, TTDoor0[i,j], XX, YY, 1, 1, 0, -1, FinalAlpha[0]);
    draw_sprite_ext(sMMapSides, TTDoor1[i,j], XX, YY, 1, 1, 0, -1, FinalAlpha[0]);
    draw_sprite_ext(sMMapSides, TTDoor2[i,j], XX, YY, 1, 1, 0, -1, FinalAlpha[0]);
    draw_sprite_ext(sMMapSides, TTDoor3[i,j], XX, YY, 1, 1, 0, -1, FinalAlpha[0]);                    
    if TTMark[i,j] != 0 draw_sprite_ext(sMMapMarks, TTMark[i,j], XX, YY, 1, 1, 0, -1, FinalAlpha[0]);
    if global.MapX == i &amp;&amp; global.MapY == j
     draw_sprite_ext(sSubCursor,global.Tick/4,XX,YY,1,1,0,c_white,FinalAlpha[0]);
   } 
  }
 }

             
 if ForcedMenu == 0 //35,23
 {
  draw_set_blend_mode(bm_add);
  for (i=0;i&lt;35;i++)
  if !(20+i*8 &gt;= view_wview[0] - 84 &amp;&amp; SweepDraw+31 &lt; 47) 
  if SweepDraw+31 &lt; view_hview-33
  if SweepDraw &gt;= 0
  {
   draw_sprite_ext(sSubSweep,0,view_xview+20+i*8,SweepDraw+view_yview+31,1,1,0,c_white,SweepAlpha*FinalAlpha[0]);
  }
  if SweepDraw+31 &gt; view_hview-53 SweepAlpha-=.05;
  else if SweepDraw &gt; 0 &amp;&amp; SweepDraw+31 &lt; view_hview-53 SweepAlpha = min(SweepAlpha+.05,1);
  draw_set_blend_mode(bm_normal); 
 }
 
 draw_sprite_ext(sSubMapName,0,view_xview+236,view_yview+27,1,1,0,image_blend,FinalAlpha[0]);

 if !(ForcedMenu == 0)
 {
  if global.KeyPushed[0,KEY_RIGHT]
   Held[0] ++; else Held[0] = 0;
  if global.KeyPushed[0,KEY_DOWN]
   Held[1] ++; else Held[1] = 0;
  if global.KeyPushed[0,KEY_LEFT]
   Held[2] ++; else Held[2] = 0;
  if global.KeyPushed[0,KEY_UP]
   Held[3] ++; else Held[3] = 0;
   
   
  if floor(RightMostTile+MapX+2)*8 &gt; 20
  {
   if global.KeyPressed[0,KEY_RIGHT] or (Held[0]&gt;16 &amp;&amp; global.Tick mod 6 == 0)
   if !global.KeyPushed[0,KEY_LEFT] &amp;&amp; Menu == 0
   {
    MapX -= 1;
    if !CanPlay
    sound_play_pos(sndSubMap,view_xview+view_wview/2,view_yview+view_hview/2);
    CanPlay = 3;
    Cursor[0] = 4;
   }
   if Cursor[2] == 0  
    draw_sprite_ext(sSubArrow,0,view_xview+32-MapOff,view_yview+view_hview/2+8,1,1,0,c_white,FinalAlpha[0]);
    else
    draw_sprite_ext(sSubArrow2,0,view_xview+32-MapOff,view_yview+view_hview/2+8,1,1,0,c_white,FinalAlpha[0]);    
  }
  
  if floor(LeftMostTile+MapX+4)*8 &lt; view_wview[0] - 20
  {
   if global.KeyPressed[0,KEY_LEFT] or (Held[2]&gt;16 &amp;&amp; global.Tick mod 6 == 0)
   if !global.KeyPushed[0,KEY_RIGHT] &amp;&amp; Menu == 0
   {
    MapX += 1;
    if !CanPlay
    sound_play_pos(sndSubMap,view_xview+view_wview/2,view_yview+view_hview/2);
    CanPlay = 3;
    Cursor[2] = 4;
   }  
   if Cursor[0] == 0
    draw_sprite_ext(sSubArrow,2,view_xview+view_wview-32+MapOff,view_yview+view_hview/2+8,1,1,0,c_white,FinalAlpha[0]);
    else
    draw_sprite_ext(sSubArrow2,2,view_xview+view_wview-32+MapOff,view_yview+view_hview/2+8,1,1,0,c_white,FinalAlpha[0]);
  } 
  
  if floor(BottomMostTile+MapY+3)*8 &gt; 31
  {
   if global.KeyPressed[0,KEY_DOWN] or (Held[1]&gt;16 &amp;&amp; global.Tick mod 6 == 0)
   if !global.KeyPushed[0,KEY_UP] &amp;&amp; Menu == 0
   {
    MapY -= 1;
    if !CanPlay
    sound_play_pos(sndSubMap,view_xview+view_wview/2,view_yview+view_hview/2);
    CanPlay = 3;
    Cursor[1] = 4;
   }
   if Cursor[3] == 0  
    draw_sprite_ext(sSubArrow,1,view_xview+view_wview/2,view_yview+43-MapOff,1,1,0,c_white,FinalAlpha[0]);
    else
    draw_sprite_ext(sSubArrow2,1,view_xview+view_wview/2,view_yview+43-MapOff,1,1,0,c_white,FinalAlpha[0]);    
  }
  
  if floor(TopMostTile+MapY+15)*8 &lt; view_wview[0] - 25
  {
   if global.KeyPressed[0,KEY_UP] or (Held[3]&gt;16 &amp;&amp; global.Tick mod 6 == 0)
   if !global.KeyPushed[0,KEY_DOWN] &amp;&amp; Menu == 0
   {
    MapY += 1;
    if !CanPlay
    sound_play_pos(sndSubMap,view_xview+view_wview/2,view_yview+view_hview/2);
    CanPlay = 3;
    Cursor[3] = 4;
   }  
   if Cursor[1] == 0
    draw_sprite_ext(sSubArrow,3,view_xview+view_wview/2,view_yview+view_hview-38+MapOff,1,1,0,c_white,FinalAlpha[0]);
    else
    draw_sprite_ext(sSubArrow2,3,view_xview+view_wview/2,view_yview+view_hview-38+MapOff,1,1,0,c_white,FinalAlpha[0]);
  }    
 }
}






// SUBSCREEN

TabOff = (1-FinalAlpha[1])*8;
Overlay = .9 + .2*sin(global.Tick/20);

if MenuAlpha[1] &gt; 0
{  
 if MenuJ &lt; 8
 MenuJ += 1;
 else
 MenuJ += .4;
 
 if MenuJ &gt;= 21
  MenuJ = 9;

 for (j=0;j&lt;7;j++)
 for (i=0;i&lt;5+1*(j mod 2 == 1);i++)
 {
  draw_sprite_ext(sSubHex,0,view_xview+HexX[i,j],view_yview+HexY[i,j],1,1,0,c_white,HexA[i,j]*FinalAlpha[1]/1.25);
  if HexS[i,j] == 0
  {
   HexA[i,j] += choose(.0075,.01);
   if HexA[i,j] &gt; 1
   HexS[i,j] = 1;
  }
  else
  {
   HexA[i,j] -= choose(.0075,.01);
   if HexA[i,j] &lt; 0
   HexS[i,j] = 0;
  }
 }

 draw_sprite_ext(sSubDescription,0,view_xview+view_wview/2,view_yview+view_hview,1,1,0,c_white,FinalAlpha[1]);
 draw_suits();
 
 if TextGo
 {
  if global.Tick mod 3 == 0 &amp;&amp; TextLength &lt; string_length(TextString)
   TextLength += 1;
  if TextLength &gt;= string_length(TextString)
   TextGo = 0; 
 }

 draw_text_adv(view_xview+TextX,view_yview+TextY,string_copy(TextString,1,TextLength),FinalAlpha[1]);
 
 if !TextGo &amp;&amp; TextLength &gt;= string_length(TextString) &amp;&amp; TextLength &gt; 1
 {
  if DescLine &lt; Texts[CurrentPower] - 1
   draw_sprite_ext(sDescArrow,global.Tick/6,global.TEXTX+3,global.TEXTY + 9,1,1,0,c_white,FinalAlpha[1]);
   else
   draw_sprite_ext(sDescArrow,global.Tick/6,global.TEXTX+3,global.TEXTY+8,1,-1,0,c_white,FinalAlpha[1]);   
 }

 
 
 // BOMBS
 
 draw_sprite_ext(sTabBomb,0,view_xview+OffXX[U_BOMB],view_yview+OffYY[U_BOMB]+TabOff,1,1,0,c_white,FinalAlpha[1]);
 
 PosY = TabH[U_BOMB]
 
 for (i=0;i&lt;string_length(global.Unlock[U_BOMB]);i++)
 {
  Char = string_char_at(global.Unlock[U_BOMB],i+1);
  Num = 0;
  switch (Char)
  {
   case "N":
    if global.Power[P_BOMB]
     Num = 1; else Num = 2;
   break;
   
   case "P":
    if global.Power[P_PBOMB]
     Num = 3; else Num = 4;
   break;   
  }
  
  draw_sprite_ext(sTabBomb,Num,view_xview+OffXX[U_BOMB],view_yview+OffYY[U_BOMB] + PosY+TabOff,1,1,0,c_white,FinalAlpha[1]);
  PP = PosY;
  if Select == U_BOMB &amp;&amp; Choice == i
  {
   draw_set_blend_mode(bm_add);
   draw_sprite_ext(sTabBombS,Num,view_xview+OffXX[U_BOMB],view_yview+OffYY[U_BOMB] + PP+TabOff,1,1,0,c_white,FinalAlpha[1]*Overlay);
   draw_set_blend_mode(bm_normal);  
   
   draw_sprite_ext(sMenuSelect,MenuJ,view_xview+OffXX[U_BOMB]+mxOff[U_BOMB],view_yview+OffYY[U_BOMB] + PP+TabOff+myOff[U_BOMB],1,1,0,c_white,FinalAlpha[1]*Overlay);
  }    
  PosY += TabH[U_BOMB]
  if Char == "P" 
  {
   PosY += 6;
   if global.Power[P_PBOMB] PSprite = sTabNum; else PSprite = sTabNum2;
   
   PosXX = 0;
   BS = string(global.PBombs)+"/"+string(global.PBombsMax);
   for (j=0;j&lt;string_length(BS);j++)
   {
    if string_char_at(BS,j+1) != "/" Spr = real(string_char_at(BS,j+1)); else Spr = 10;
    draw_sprite_ext(PSprite,Spr,view_xview+OffXX[U_BOMB]+13+PosXX,view_yview+OffYY[U_BOMB] + PosY - 8+TabOff,1,1,0,c_white,FinalAlpha[1]);
    PosXX += SLen[Spr] + 1;
   }
  }  
 }
 
 
 // MISSILES
 
 draw_sprite_ext(sTabMissile,0,view_xview+OffXX[U_MISSILE],view_yview+OffYY[U_MISSILE]+TabOff,1,1,0,c_white,FinalAlpha[1]);
 
 PosY = TabH[U_MISSILE];
 
 for (i=0;i&lt;string_length(global.Unlock[U_MISSILE]);i++)
 {
  Char = string_char_at(global.Unlock[U_MISSILE],i+1);
  Num = 0;
  switch (Char)
  {
   case "N":
    if global.Power[P_MISSILE]
     Num = 1; else Num = 2;
   break;
   
   case "S":
    if global.Power[P_SMISSILE]
     Num = 3; else Num = 4;
   break;   
  }
  
  draw_sprite_ext(sTabMissile,Num,view_xview+OffXX[U_MISSILE],view_yview+OffYY[U_MISSILE]+TabOff + PosY,1,1,0,c_white,FinalAlpha[1]);
  PP = PosY; 
  if Select == U_MISSILE &amp;&amp; Choice == i
  {
   draw_set_blend_mode(bm_add);
   draw_sprite_ext(sTabMissileS,Num,view_xview+OffXX[U_MISSILE],view_yview+OffYY[U_MISSILE] + PP+TabOff,1,1,0,c_white,FinalAlpha[1]*Overlay);
   draw_set_blend_mode(bm_normal);  
   draw_sprite_ext(sMenuSelect,MenuJ,view_xview+OffXX[U_MISSILE]+mxOff[U_MISSILE],view_yview+OffYY[U_MISSILE] + PP+TabOff+myOff[U_MISSILE],1,1,0,c_white,FinalAlpha[1]*Overlay);
  }    
  
  PosY += TabH[U_MISSILE];
  
  if Char == "S" 
  {
   PosY += 6;
    if global.Power[P_SMISSILE] PSprite = sTabNum; else PSprite = sTabNum2;
    
   PosXX = 0;
   BS = string(global.SMissiles)+"/"+string(global.SMissilesMax);
   for (j=0;j&lt;string_length(BS);j++)
   {
    if string_char_at(BS,j+1) != "/" Spr = real(string_char_at(BS,j+1)); else Spr = 10;
    draw_sprite_ext(PSprite,Spr,view_xview+OffXX[U_MISSILE]+13+PosXX,view_yview+OffYY[U_MISSILE] + PosY - 8+TabOff,1,1,0,c_white,FinalAlpha[1]);
    PosXX += SLen[Spr] + 1;
   }
  }
  if Char == "N" 
  {
   PosY += 6;
   if global.Power[P_MISSILE] PSprite = sTabNum; else PSprite = sTabNum2;
   
   PosXX = 0;
   BS = string(global.Missiles)+"/"+string(global.MissilesMax);
   for (j=0;j&lt;string_length(BS);j++)
   {
    if string_char_at(BS,j+1) != "/" Spr = real(string_char_at(BS,j+1)); else Spr = 10;
    draw_sprite_ext(PSprite,Spr,view_xview+OffXX[U_MISSILE]+13+PosXX,view_yview+OffYY[U_MISSILE] + PosY - 8+TabOff,1,1,0,c_white,FinalAlpha[1]);
    PosXX += SLen[Spr] + 1;
   }
  }   
 }  
 
 // BEAMS
 
 draw_sprite_ext(sTabBeam,0,view_xview+OffXX[U_BEAM],view_yview+OffYY[U_BEAM]+TabOff,1,1,0,c_white,FinalAlpha[1]);
 
 PosY = TabH[U_BEAM];
 
 for (i=0;i&lt;string_length(global.Unlock[U_BEAM]);i++)
 {
  Char = string_char_at(global.Unlock[U_BEAM],i+1);
  Num = 0;
  switch (Char)
  {
   case "P":
    if global.Power[P_PBEAM]
     Num = 1; else Num = 2;
   break;
   
   case "L":
    if global.Power[P_LBEAM]
     Num = 3; else Num = 4;
   break;   
   
   case "I":
    if global.Power[P_IBEAM]
     Num = 5; else Num = 6;
   break;
    
   case "W":
    if global.Power[P_WBEAM]
     Num = 7; else Num = 8;        
   break;  
   
   case "C":
    if global.Power[P_CBEAM]
     Num = 9; else Num = 10;        
   break;  
   
   case "H":
    if global.Power[P_HBEAM]
     Num = 11; else Num = 12;        
   break;          
  }
  
  draw_sprite_ext(sTabBeam,Num,view_xview+OffXX[U_BEAM],view_yview+OffYY[U_BEAM] + PosY+TabOff,1,1,0,c_white,FinalAlpha[1]);
  
  if Select == U_BEAM &amp;&amp; Choice == i
  {
   draw_set_blend_mode(bm_add);
   draw_sprite_ext(sTabBeamS,Num,view_xview+OffXX[U_BEAM],view_yview+OffYY[U_BEAM] + PosY+TabOff,1,1,0,c_white,FinalAlpha[1]*Overlay);
   draw_set_blend_mode(bm_normal);  
   draw_sprite_ext(sMenuSelect,MenuJ,view_xview+OffXX[U_BEAM]+mxOff[U_BEAM],view_yview+OffYY[U_BEAM] + PosY+TabOff+myOff[U_BEAM],1,1,0,c_white,FinalAlpha[1]*Overlay);
  }  
   
  PosY += TabH[U_BEAM];  
 }
 
 
 // SUITS
 
 draw_sprite_ext(sTabSuit,0,view_xview+OffXX[U_SUIT],view_yview+OffYY[U_SUIT]+TabOff,1,1,0,c_white,FinalAlpha[1]);
 
 PosY = TabH[U_SUIT];
 
 for (i=0;i&lt;string_length(global.Unlock[U_SUIT]);i++)
 {
  Char = string_char_at(global.Unlock[U_SUIT],i+1);
  Num = 0;
  switch (Char)
  {
   case "P":
    if global.Power[P_PSUIT]
     Num = 1; else Num = 2;
   break;
   
   case "V":
    if global.Power[P_VSUIT]
     Num = 3; else Num = 4;
   break;
      
   case "G":
    if global.Power[P_GSUIT]
     Num = 5; else Num = 6;
   break;      
  }
  
  draw_sprite_ext(sTabSuit,Num,view_xview+OffXX[U_SUIT],view_yview+OffYY[U_SUIT] + PosY+TabOff,1,1,0,c_white,FinalAlpha[1]);  
  
  if Select == U_SUIT &amp;&amp; Choice == i
  {
   draw_set_blend_mode(bm_add);
   draw_sprite_ext(sTabSuitS,Num,view_xview+OffXX[U_SUIT],view_yview+OffYY[U_SUIT] + PosY+TabOff,1,1,0,c_white,FinalAlpha[1]*Overlay);
   draw_set_blend_mode(bm_normal);  
   draw_sprite_ext(sMenuSelect,MenuJ,view_xview+OffXX[U_SUIT]+mxOff[U_SUIT],view_yview+OffYY[U_SUIT] + PosY+TabOff+myOff[U_SUIT],1,1,0,c_white,FinalAlpha[1]*Overlay);
  } 
  
  PosY += TabH[U_SUIT];  
 }
 
 // MISC
 
 draw_sprite_ext(sTabMisc,0,view_xview+OffXX[U_MISC],view_yview+OffYY[U_MISC]+TabOff,1,1,0,c_white,FinalAlpha[1]);
 
 PosY = TabH[U_MISC];
 
 for (i=0;i&lt;string_length(global.Unlock[U_MISC]);i++)
 {
  Char = string_char_at(global.Unlock[U_MISC],i+1);
  Num = 0;
  switch (Char)
  {
   case "B":
    if global.Power[P_MORPHBALL]
     Num = 1; else Num = 2;
   break;
   case "G":
    if global.Power[P_GRIP]
     Num = 3; else Num = 4;
   break;
   case "S":
    if global.Power[P_SCREW]
     Num = 5; else Num = 6;
   break;  
   case "P":
    if global.Power[P_SPRINGBALL]
     Num = 7; else Num = 8;
   break; 
   case "H":
    if global.Power[P_HEATSINK]
     Num = 9; else Num = 10;
   break;          
  }
  
  draw_sprite_ext(sTabMisc,Num,view_xview+OffXX[U_MISC],view_yview+OffYY[U_MISC] + PosY+TabOff,1,1,0,c_white,FinalAlpha[1]);
  
  if Select == U_MISC &amp;&amp; Choice == i
  {
   draw_set_blend_mode(bm_add);
   draw_sprite_ext(sTabMiscS,Num,view_xview+OffXX[U_MISC],view_yview+OffYY[U_MISC] + PosY+TabOff,1,1,0,c_white,FinalAlpha[1]*Overlay);
   draw_set_blend_mode(bm_normal);  
   draw_sprite_ext(sMenuSelect,MenuJ,view_xview+OffXX[U_MISC]+mxOff[U_MISC],view_yview+OffYY[U_MISC] + PosY+TabOff+myOff[U_MISC],1,1,0,c_white,FinalAlpha[1]*Overlay);
  } 

  
  PosY += TabH[U_MISC];  
 }
 
 // BOOTS
 
 draw_sprite_ext(sTabBoots,0,view_xview+OffXX[U_BOOTS],view_yview+OffYY[U_BOOTS]+TabOff,1,1,0,c_white,FinalAlpha[1]);
 
 PosY = TabH[U_BOOTS];
 
 for (i=0;i&lt;string_length(global.Unlock[U_BOOTS]);i++)
 {
  Char = string_char_at(global.Unlock[U_BOOTS],i+1);
  Num = 0;
  switch (Char)
  {
   case "S":
    if global.Power[P_SPEEDBOOSTER]
     Num = 1; else Num = 2;
   break;
   case "H":
    if global.Power[P_HIJUMP]
     Num = 3; else Num = 4;
   break;
   case "P":
    if global.Power[P_SPACE]
     Num = 5; else Num = 6;
   break;      
  }
  
  draw_sprite_ext(sTabBoots,Num,view_xview+OffXX[U_BOOTS],view_yview+OffYY[U_BOOTS] + PosY+TabOff,1,1,0,c_white,FinalAlpha[1]);
  if Select == U_BOOTS &amp;&amp; Choice == i
  {
   draw_set_blend_mode(bm_add);
   draw_sprite_ext(sTabBootsS,Num,view_xview+OffXX[U_BOOTS],view_yview+OffYY[U_BOOTS] + PosY+TabOff,1,1,0,c_white,FinalAlpha[1]*Overlay);
   draw_set_blend_mode(bm_normal);  
   draw_sprite_ext(sMenuSelect,MenuJ,view_xview+OffXX[U_BOOTS]+mxOff[U_BOOTS],view_yview+OffYY[U_BOOTS] + PosY+TabOff+myOff[U_BOOTS],1,1,0,c_white,FinalAlpha[1]*Overlay);
  } 
  
  PosY += TabH[U_BOOTS];  
 }
}





// LOGBOOK

if FinalAlpha[2] &gt; 0
{
 if global.KeyPushed[0,KEY_DOWN]
  LHeld[0] ++; else LHeld[0] = 0;
 if global.KeyPushed[0,KEY_UP]
  LHeld[1] ++; else LHeld[1] = 0;
   
 draw_sprite_ext(sSubLog,0,view_xview+10,view_yview+24,1,1,0,c_white,FinalAlpha[2]);
 draw_sprite_ext(sSubName,LogMenu,view_xview+104,view_yview+32,1,1,0,c_white,FinalAlpha[2]);

 SNum = 0;

 if ds_list_size(global.Log[LogMenu])&gt;0
 {
  SNum = 2;
  if LogIndex[LogMenu] == 0
  SNum = 1;
  if ds_list_size(global.Log[LogMenu]) == 1 SNum = 0;
  
  SlideMax = 149;
  SlideOff = (LogOff[LogMenu]/(ds_list_size(global.Log[LogMenu])-LogNumber))*SlideMax;
  if LogIndex[LogMenu] == ds_list_size(global.Log[LogMenu]) - 1
   SNum = 3;
  if ds_list_size(global.Log[LogMenu]) == 1
   SNum = 0;
 }
 
 draw_sprite_ext(sSubSlide,SNum,view_xview+83,view_yview+45,1,1,0,c_white,FinalAlpha[2]); 
 
 if ds_list_size(global.Log[LogMenu])&gt;0
 {
  draw_sprite_ext(sSubPlace,0,view_xview+83,view_yview+54+SlideOff,1,1,0,c_white,FinalAlpha[2]); 
 }
 
 //296 32
 
 for (l=LogOff[LogMenu];l&lt;min(ds_list_size(global.Log[LogMenu]),LogNumber+LogOff[LogMenu]);l++)
 {
  Positional = l - LogOff[LogMenu];
  
  draw_sprite_ext(sSubIndex,(LogIndex[LogMenu] != l),view_xview+12,view_yview+45+11*Positional,1,1,0,c_white,FinalAlpha[2]);
  if (LogIndex[LogMenu] == l)
  {
   draw_set_blend_mode(bm_add)
   draw_sprite_ext(sSubIndex,(LogIndex[LogMenu] != l),view_xview+12,view_yview+45+11*Positional,1,1,0,c_white,FinalAlpha[2]);
   draw_set_blend_mode(bm_normal);
  }
  
//  draw_text_adv_thin(view_xview+13,view_yview+41+11*Positional,global.LogName[LogMenu,ds_list_find_value(global.Log[LogMenu],l)],FinalAlpha[2]);  
  draw_set_alpha(FinalAlpha[2]);
  draw_set_font(fntMap);
  draw_set_halign(fa_left);
  draw_set_valign(fa_top);
  draw_set_color(c_black);
  draw_text(view_xview+16,view_yview+44+11*Positional,global.LogName[LogMenu,ds_list_find_value(global.Log[LogMenu],l)]);
  draw_set_color(c_white);
  draw_text(view_xview+15,view_yview+43+11*Positional,global.LogName[LogMenu,ds_list_find_value(global.Log[LogMenu],l)]);
 }
 
 if ds_list_size(global.Log[LogMenu])&gt;0
 {
  if global.KeyPressed[0,KEY_UP] or (LHeld[1]&gt;16 &amp;&amp; global.Tick mod 4 == 0)
  {
   Prev = LogIndex[LogMenu];
   LogIndex[LogMenu] = max(LogIndex[LogMenu]-1,0);
   if LogIndex[LogMenu] - LogOff[LogMenu] == -1
    LogOff[LogMenu] --;
   if Prev != LogIndex[LogMenu]
   {
    sound_play_pos(sndSubMap,view_xview+view_wview/2,view_yview+view_hview/2);
    log_refresh();
   }
  }
  if global.KeyPressed[0,KEY_DOWN] or (LHeld[0]&gt;16 &amp;&amp; global.Tick mod 4 == 0)
  {
   Prev = LogIndex[LogMenu];
   LogIndex[LogMenu] = min(LogIndex[LogMenu]+1,ds_list_size(global.Log[LogMenu])-1);
   if LogIndex[LogMenu] == LogNumber + LogOff[LogMenu]
    LogOff[LogMenu] += 1;
   if Prev != LogIndex[LogMenu]
   {
    sound_play_pos(sndSubMap,view_xview+view_wview/2,view_yview+view_hview/2);
    log_refresh();
   }
  }  
  
  if surface_exists(LogSurface) draw_surface_ext(LogSurface,view_xview+94,view_yview+44,1,1,0,-1,FinalAlpha[2]);
  else {log_recreate(); log_refresh();}
  
  draw_sprite_ext(sLogBox,ds_list_find_value(global.Log[LogMenu],LogIndex[LogMenu]),view_xview+308,view_yview+46,1,1,0,c_white,FinalAlpha[2]);
  draw_sprite_ext(LogSprite[LogMenu],ds_list_find_value(global.Log[LogMenu],LogIndex[LogMenu]),view_xview+308,view_yview+46,1,1,0,c_white,FinalAlpha[2]); 
 }
} 

draw_set_alpha(1);


/// SETTINGS





if MenuAlpha[3] &gt; 0
{
 draw_text_adv(view_xview+(view_wview/2)-64,view_yview+48,"SETTINGS SCREEN @2(WIP)",FinalAlpha[3]);
 draw_text_adv(view_xview+(view_wview/2)-64,view_yview+64,"FPS: @3"+string(fps),FinalAlpha[3]); 
 draw_text_adv(view_xview+(view_wview/2)-64,view_yview+80,"FPSR: @5"+string(fps_real),FinalAlpha[3]);  
}
//draw_text_adv(60,60,string(fps),1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>160,160</point>
  </PhysicsShapePoints>
</object>
