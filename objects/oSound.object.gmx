<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// LOAD SXMS

/*sxms_internal("SXMS3.dll",1);
sxwamp_init();
sxwamp_output_load("out_wave.dll");
sxwamp_input_load("in_gsf.dll");*/


// Load else

//audio_falloff_set_model(audio_falloff_exponent_distance);
audio_channel_num(16);

global.MusicVol = .5;
global.SoundVol = 1;

global.DoT = 0; // Are we playing item pickup music?
MTime = 0; // For loop

global.Track[0] = musInfiltration;
global.TrackLoop[0] = 1;
global.TrackLoopPoint[0] = -1;

global.Track[1] = musItem;
global.TrackLoop[1] = 0;
global.TrackLoopPoint[1] = -1;

global.Track[2] = musItemSmall;
global.TrackLoop[2] = 0;
global.TrackLoopPoint[2] = -1;

global.Track[3] = musChozo;
global.TrackLoop[3] = 1;
global.TrackLoopPoint[3] = -1;

global.Track[4] = musTitle;
global.TrackLoop[4] = 1;
global.TrackLoopPoint[4] = -1;
  
global.Track[5] = musMapRoom;
global.TrackLoop[5] = 1;
global.TrackLoopPoint[5] = -1;

global.Track[6] = musMenu;
global.TrackLoop[6] = 1;
global.TrackLoopPoint[6] = -1;

global.Track[7] = musSaveRoom;
global.TrackLoop[7] = 1;
global.TrackLoopPoint[7] = -1;

global.Track[8] = musBrinstar;
global.TrackLoop[8] = 1;
global.TrackLoopPoint[8] = -1;

global.Track[9] = musKraid;
global.TrackLoop[9] = 1;
global.TrackLoopPoint[9] = 12.942216;

global.Track[10] = musTower;
global.TrackLoop[10] = 1;
global.TrackLoopPoint[10] = -1;

MusicIntro = 0;

Volume = 0;
RainVolume = 0;
RainSound = -1;
ChainVolume = 0;
ChainSound = -1;

global.CurrentTrackMain = -1;
global.CurrentTrackLoop = -1;

global.TrackNumber = -1;
global.TargetTrack = -1;

for (i=0;i&lt;16;i+=1)
{
 global.SoundID[i] = -1;
 global.EmitterID[i] = -1;
 
 global.MusicID[i] = -1;
 global.MEmitterID[i] = -1;
}

global.CurrentSound = 0;
global.CurrentMusic = 0;

global.CurrentEmitter = 0;

global.MusicEmitter = audio_emitter_create();
global.RainEmitter = audio_emitter_create();
global.ChainEmitter = audio_emitter_create();

audio_emitter_gain(global.ChainEmitter,0)

global.BackgroundTrack = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Play intro music (called from oSamus step event (Fanfare Check))

music_play(10);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=0;i&lt;16;i+=1)
{
 if audio_emitter_exists(global.EmitterID[i])
 {
  audio_emitter_gain(global.EmitterID[i], global.SoundVol);  
  //audio_emitter_position(global.MEmitterID[global.CurrentMusic], 
//  view_xview + view_wview/2, view_yview + view_hview/2, 0);
  audio_emitter_gain(global.MEmitterID[global.CurrentMusic], global.MusicVol);  
 }
}

// MUSIC CONTROL

if global.TrackNumber != global.TargetTrack
{
 if Volume &gt; 0
 Volume -= .025;  
 else
 {
  if global.TargetTrack != -1
  {
   audio_stop_sound(global.CurrentTrackMain);
 
   global.CurrentTrackMain = audio_play_sound_on(global.MusicEmitter,global.Track[global.TargetTrack],global.TrackLoop[global.TargetTrack],0); 
     
   global.TrackNumber = global.TargetTrack;
  }
  else
  {
   audio_stop_sound(global.CurrentTrackMain);
   global.CurrentTrackMain = -1;
   global.TrackNumber = -1;
   MusicIntro = 1;
   MTime = 0;
  }
 }
}
else
{
 if global.TrackNumber != -1 &amp;&amp; global.CurrentTrackMain != -1
 {
  if !global.BackgroundTrack
  {
   if Volume &lt; 1
    Volume = 1;
  }
  else
  {
   if Volume &lt; .4 Volume += .1;
   if Volume &gt; .4 Volume -= .1;
  }
  
  if global.TrackLoopPoint[global.TrackNumber] != -1
//  if global.TrackLoop[global.TrackNumber] == 1
  if audio_sound_get_track_position(global.CurrentTrackMain) &gt;= audio_sound_length(global.Track[global.TrackNumber])-2/60
  {
   audio_sound_set_track_position(global.CurrentTrackMain,global.TrackLoopPoint[global.TrackNumber]);  
  }
 }
}

MTime++;
 
if !audio_is_playing(global.CurrentTrackMain) &amp;&amp; global.TrackNumber == 1
{
 music_play(global.ResumeTrack);
 global.DoT = 0;
}

if !audio_is_playing(ChainSound)
{
 ChainSound = audio_play_sound_on(global.ChainEmitter,sndChain,1,1);
}

if Volume &gt; 1
 Volume = 1;
if ChainVolume &gt; 0
 ChainVolume --;
   
global.BackgroundTrack = instance_exists(oSubscreen);

//audio_listener_position(view_xview[0] + view_wview[0]/2,view_yview[0] + view_hview[0]/2,0);
audio_listener_position(0,0,0);

//audio_listener_orientation(0,0,-1,1,1,0);
//audio_emitter_position(global.RainEmitter, view_xview + view_wview/2, view_yview + view_hview/2, 0);
//audio_emitter_position(global.MusicEmitter, view_xview + view_wview/2, view_yview + view_hview/2, 0);
audio_emitter_gain(global.MusicEmitter, Volume * global.MusicVol); 
audio_emitter_gain(global.RainEmitter, RainVolume * global.SoundVol / 1.5); 
//audio_emitter_position(global.ChainEmitter, view_xview + view_wview/2, view_yview + view_hview/2, 0);
audio_emitter_gain(global.ChainEmitter, min(ChainVolume * global.SoundVol / 1.5,1))  

if instance_exists(oRain) or instance_exists(oRainNoise)
{
 if instance_exists(oRainNoise)
 {
  if !global.BackgroundTrack
  {
   if RainVolume &gt; .5
    RainVolume = max(RainVolume-.05,.5);
   if RainVolume &lt; .5
    RainVolume = min(RainVolume+.05,.5);
  }
  else
  {
   if RainVolume &gt; .2
    RainVolume = max(RainVolume-.05,.2);
   if RainVolume &lt; .2
    RainVolume = min(RainVolume+.05,.2);
  }  
 }
 else
 {
  if !global.BackgroundTrack
  {
   if RainVolume &lt; 1
    RainVolume = min(RainVolume+.05,1);
  }
  else
  {
   if RainVolume &lt; .5
    RainVolume = min(RainVolume+.05,.5);
   if RainVolume &gt; .5
    RainVolume = max(RainVolume-.05,.5);    
  }  
 }

 
 if RainSound == -1 
  RainSound = audio_play_sound_on(global.RainEmitter,sndRain,1,2);    
}
else
{
 if RainVolume &lt;= 0
 if RainSound != -1 
 {
  audio_stop_sound(RainSound);
  RainSound = -1;  
 }
  
 if RainVolume &gt; 0
  RainVolume = max(RainVolume-.1,0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// external_free(dll);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
