<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Death

if !global.Dead
global.Rectangle = max(global.Rectangle-.025,0);
else
global.Rectangle = min(global.Rectangle+.015,1);

if global.PistolCharge == 1
{
 PistolFlash += .5;
 if PistolFlash &gt; 5
  PistolFlash = 0;
}
else
PistolFlash = 0;

MapMark ++; if MapMark &gt; 16 MapMark = 0;
view_visible[1] = 0// instance_exists(oRipple);

if global.Suit == 3 
 global.PistolCharge = min(global.PistolCharge+1/128,1);
 else
 global.PistolCharge = 0;
 
if global.Energy &lt;= 0 &amp;&amp; global.Dead == 0
{
 global.Dead = 1;
 
 sound_play_pos(sndDeath,view_xview+view_wview/2,view_yview+view_hview/2);
 
 DeathX = 0;
 DeathY = 0;
 DeathF = 1;
 DeathS = sSDieRight;
 
 if instance_exists(oPlayer)
 {
  DeathX = oPlayer.x;
  DeathY = oPlayer.y;
  DeathF = oPlayer.Facing;
  if DeathF DeathS = sSDieRight;
  else DeathS = sSDieLeft;
 }
  
 // SUIT SPRITE
 Str[0] = "";
 Str[1] = "V";
 Str[2] = "G";
 Str[3] = "Z";  
 if global.FinalSuit != 0
 {
  CheckFinal = asset_get_index(sprite_get_name(DeathS)+Str[global.FinalSuit]);
  if CheckFinal != -1
   DeathSprite = CheckFinal;
 }  
 else
 DeathSprite = DeathS;
 
 // Death Sprite done. [DeathSprite]
 

 with (oPlayer) instance_destroy();
 global.PausedGame = 1;
 music_stop();
}

global.Tick += 1;
if global.Tick &gt; 100000
 global.Tick = 110;
if global.PausedGame == 0 &amp;&amp; !instance_exists(oSubscreen)
{
 global.TickP += 1;
 if global.TickP &gt; 100000
  global.TickP = 110;
}
 
if GotSuit GotSuit--;
// Subscreen

if global.KeyPressed[0,KEY_ENTER] &amp;&amp; !instance_exists(oSubscreen)
&amp;&amp; global.PausedGame == 0 &amp;&amp; global.InGame &amp;&amp; instance_exists(oPlayer)
&amp;&amp; global.Tick &gt; 2 
if oPlayer.Fanfare == 0
{
 Sub = instance_create(x,y,oSubscreen);

 if (oPlayer.State == oPlayer.BALL)
 or (oPlayer.SuperBall == 1)
 or (oPlayer.State == oPlayer.CLIMBING &amp;&amp; oPlayer.MorphClimb)
 {
  Sub.CanMorph = 0;
  Sub.CanZero = 0;
 }
 if oPlayer.State == oPlayer.GRIP
 or oPlayer.State == oPlayer.CLIMBING
  Sub.CanGrip = 0;
 if oPlayer.State == oPlayer.CRAWL
 or oPlayer.State == oPlayer.CRAWLING
 or oPlayer.State == oPlayer.UNCRAWL
  Sub.CanPower = 0;
 if oPlayer.State == oPlayer.SUPERJUMP
 or oPlayer.State == oPlayer.SJSTART
 or oPlayer.State == oPlayer.SJEND
  Sub.CanZero = 0;
  

  
 global.MapStep = 0;
}

if instance_exists(oSubscreen)
{
 if global.MapStep == 0 
 {
  global.MapFade = min(global.MapFade+.005,.5);
  if global.MapFade == .5
   global.MapStep = 1;
 }
 if global.MapStep == 1 
 {
  global.MapFade = max(global.MapFade-.005,0);
  if global.MapFade == 0
   global.MapStep = 0;
 }
 
 global.MapColor = merge_color(c_white,c_black,global.MapFade);
}

Do = 1;
if instance_exists(oPlayer)
if oPlayer.Fanfare &gt; 0
 Do = 0;
 
if instance_exists(oSubscreen) or Do == 0 or global.Dead 
 global.HudOff = max(global.HudOff-2,-32);
 else
 global.HudOff = min(global.HudOff+4,0);
 
// Speed

if global.Debug
{
 room_speed = 60 + (9940*keyboard_check_direct(vk_space)) - 50*keyboard_check_direct(vk_shift);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(mouse_x,mouse_y,oRipple);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// D for DOOR; Door_byte_breakdown
global.D[0] = $38000; 
global.D[1] = $7000; 
global.D[2] = $E00; 
global.D[3] = $1C0;
// B for BYTE; Map_byte_breakdown
global.B[0] = $FF00000000;
global.B[1] = $FF000000;
global.B[2] = $FF0000;
global.B[3] = $FF00;
global.B[4] = $FF;
// U for UNCOVER; Map_discoveries
global.U[0] = $3;
global.U[1] = $C;
global.U[2] = $30;
global.U[3] = $C0;
// N for NUNCOVER; Map_disc_inverse
global.N[0] = $FC;
global.N[1] = $F3;
global.N[2] = $CF;
global.N[3] = $3F;
// H for H...?; Map_bitshift_get
global.H[0] = 0;
global.H[1] = 2;
global.H[2] = 4;
global.H[3] = 6;
// BL for BITLEFT
global.BL[0] = 32;
global.BL[1] = 24;
global.BL[2] = 16;
global.BL[3] = 8;
global.BL[4] = 0;

// Charge Beam Animation

global.CBI = "0122333344433344455544455544466655566655566655577888";

// Map const

global.ShoulderPads = 0;

load_constants();
map_init();

MapSurface = surface_create(56,40);
hud_map_redraw();

MapMark = 0;
MapOffX = 0;
MapOffY = 0;
 
global.Dead = 0;
global.PistolCharge = 0;
PistolFlash = 0;

// Ticks

global.Tick = 0;
global.TickP = 0;
GotSuit = 0; // For picking up suit items (effect)

global.Recording = 0;
global.Demo = 0;
global.DemoFrame = 0;
global.DemoFadeTime = 20;

AmmoFont = font_add_sprite(sHFont,ord("0"),0,1);

global.Layer = 0;

// Transitions

global.Transition = -1;
global.JustTrans = 0;
global.TransitionType = 0;// 0 yt, 1 nt

// Paused/in game

global.PausedGame = 0;
global.PausedEnemies = 0;
global.InGame = 0;

// Fade, can control

global.Fade = 0;
global.CanControl = 1;
global.HudOff = 0;
global.MapFade = 00;
global.MapStep = 0;
global.MapColor = c_white;

// Debug

global.Debug = 1;
global.Difficulty = 1;

// Save System

global.IDStack = ds_list_create();

// Logbook

global.Log[0] = ds_list_create();
global.Log[1] = ds_list_create();
global.Log[2] = ds_list_create();

load_logs();

// Energy, missiles, weapons

global.Energy = 199;
global.EnergyMax = 1299;

global.Missiles = 0;
global.MissilesMax = 0;
global.PBombs = 20;
global.PBombsMax = 20;
global.SMissiles = 0;
global.SMissilesMax = 0;

global.RememberSelect = 0;
global.MainSelect = 0;
global.HudSelect = 0; // 0 ZM, 1 SM
global.MainSelected = 0;
global.HaveMissiles = 0;
global.HaveSMissiles = 0;
global.HavePBombs = 0;

// Powerups

global.Unlock[U_BEAM] = "PLCIWH"; //P:POWER //6, power, long, charge, ice, wave, plasma, 
global.Unlock[U_MISC] = "BGPSH"; //G:GRIP,B:BALL,S:SCREW,P:SPRING,H:HEATSINK
global.Unlock[U_BOMB] = "N"; //N:NORM 
global.Unlock[U_BOOTS] = "HSP"; //S:SPEED,H:HIGHJUMP,P:SPACEJ
global.Unlock[U_SUIT] = "PVG"; //P:POWER  VG
global.Unlock[U_MISSILE] = "NS"; //N:NORMAL  S:SUPER

global.Suit = 0; // 0 p, 1 v, 2 g, 3 z
global.LastItem = noone; // For flashing

global.Power[30] = 0;

global.Power[P_MORPHBALL] = 0;
global.Power[P_GRIP] = 0;
global.Power[P_SPRINGBALL] = 0;
global.Power[P_PBOMB] = 0;
global.Power[P_PSUIT] = 1;
global.Power[P_VSUIT] = 0;
global.Power[P_GSUIT] = 0;
global.Power[P_BOMB] = 0;
global.Power[P_PBOMB] = 0;
global.Power[P_MISSILE] = 0;
global.Power[P_SMISSILE] = 0;
global.Power[P_SPEEDBOOSTER] = 0;
global.Power[P_SCREW] = 0;
global.Power[P_HIJUMP] = 0;
global.Power[P_SPACE] = 0;
global.Power[P_HEATSINK] = 0;

global.Power[P_LBEAM] = 0;
global.Power[P_PBEAM] = 1;
global.Power[P_CBEAM] = 0;
global.Power[P_WBEAM] = 0;
global.Power[P_IBEAM] = 0;
global.Power[P_HBEAM] = 0;

global.Rectangle = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// OTHERS
if view_current != 0 exit;

if global.InGame
{  
 transition_handle(); 
 gui_update();

 if global.Debug
 {
  draw_text_adv(view_xview+2,view_yview+view_hview-17-global.HudOff,"FPS: " + string(floor(fps)),1);
  if global.Recording
   draw_text_adv(view_xview+2,view_yview+12+global.HudOff,"@1RECORDING",1);  
  if global.Demo
   draw_text_adv(view_xview+2,view_yview+12+global.HudOff,"@4DEMO",1);  
 }
 
 draw_background(bgMapBack, view_xview2 + MapX, view_yview2 + MapY+global.HudOff);
 
 // DRAW HUD MAP

 if !surface_exists(MapSurface)
 {
  MapSurface = surface_create(56,40);
  hud_map_redraw();
 }
 else
 {  
  MeX = view_xview+MapX;//+floor(MapOffX);
  MeY = view_yview+MapY+global.HudOff;//+floor(MapOffY);
  
  draw_surface_part(MapSurface,8-floor(MapOffX),8-floor(MapOffY),40,24,MeX,MeY);
 }
 
 MapOffX *= .9;
 MapOffY *= .9;
 
 if abs(MapOffX) &lt; .15
  MapOffX = 0;
 if abs(MapOffY) &lt; .15
  MapOffY = 0;
 
 map_update();
 
 global.EnergyS = string(max(0,floor(global.Energy)));
 if global.Energy&gt;=10
 { 
 draw_sprite(sFontNumber,real(string_char_at(string(global.EnergyS),1)),view_xview+2,view_yview+3+global.HudOff);
 draw_sprite(sFontNumber,real(string_char_at(string(global.EnergyS),2)),view_xview+8,view_yview+3+global.HudOff); 
 }
 else
 { 
 draw_sprite(sFontNumber,0,view_xview+2,view_yview+3+global.HudOff);
 draw_sprite(sFontNumber,real(string_char_at(string(global.EnergyS),1)),view_xview+8,view_yview+3+global.HudOff); 
 }
 
 
 if global.EnergyMax &gt; 99
  draw_sprite(sEnergyBar,0,view_xview + 16, view_yview + 2+global.HudOff);
 
 if global.EnergyMax &lt; 700
 for (i=0;i&lt;floor(global.EnergyMax/100);i++)
  draw_sprite(sEnergyTank,floor(global.Energy/100)&gt;i,view_xview + 18 + i*6, view_yview + 3+global.HudOff);
 else
 {
  for (i=0;i&lt;floor(6);i++)
   draw_sprite(sEnergyTank,floor(global.Energy/100)&gt;i,view_xview + 20 + i*5, view_yview + 6+global.HudOff);
  for (i=0;i&lt;floor(global.EnergyMax/100)-6;i++)
   draw_sprite(sEnergyTank,floor(global.Energy/100)&gt;i+6,view_xview + 20 + i*5, view_yview + 1+global.HudOff);
 }
 
 
 

 
 if MapMark &gt; 7 
 draw_background(bgMapMark, view_xview2 + MapX, view_yview2 + MapY+global.HudOff);
 
 
 
 
 
 
 // DRAW PISTOL CHARGE
 
 if global.Suit == 3
 {
  draw_sprite(sPistolMeter,0,view_xview+1,view_yview+11+global.HudOff);
  draw_sprite_ext(sPistolMeter,2+PistolFlash,view_xview+3,view_yview+11+global.HudOff,global.PistolCharge*52,1,0,c_white,1);  
  draw_sprite(sPistolMeter,1,view_xview+1,view_yview+11+global.HudOff); 
 }
}



// DRAW COVER

draw_set_color(c_black);
draw_set_alpha(global.Rectangle);
draw_rectangle(view_xview,view_yview,view_xview+view_wview,view_yview+view_hview,0);
draw_set_alpha(1);
/*
draw_rectangle(view_xview,view_yview,view_xview+(view_wview/2*global.Rectangle),view_yview+view_hview,0);
draw_rectangle(view_xview+view_wview,view_yview,view_xview+view_wview-(view_wview/2*global.Rectangle),view_yview+view_hview,0);    */

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.Debug
 window_set_fullscreen(!window_get_fullscreen());
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
