<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-900</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>OffsetFactor = .965; // Ripple offset mult (Dist)
OffsetValue = 8; // Absolute ripple offset
OffsetAngle = 0; // Skews the ripple

Width = 32; // Ripple width
Sides = 20; // Ripple quality
Radius = -8; // Beginning radius

YMult = .6;
XMulter = 20; // Divides XMult in beginning
XMult = .8/(1+XMulter);

Tick = 0;

Bloom = 8;

Speed = 5;
Alpha = 4;

Surface = surface_create(surface_get_width(application_surface),surface_get_height(application_surface));

ColBack = c_orange;
ColFront = c_yellow;
VerCol = merge_color(c_yellow,c_white,.5);

sound_play_pos(sndPBombBlast,x,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Ripple

draw_set_alpha(Bloom/4);

EllipseWidth = (Radius)*XMult;
EllipseHeight = (Radius)*YMult;

draw_set_blend_mode(bm_add);
draw_set_alpha(Bloom/4);
draw_ellipse_colour(x-EllipseWidth,y-EllipseHeight,x+EllipseWidth,y+EllipseHeight,ColFront,c_black,0);
draw_set_alpha(Bloom/6);
draw_ellipse_colour(x-EllipseWidth*1.5,y-EllipseHeight*1.5,x+EllipseWidth*1.5,y+EllipseHeight*1.5,ColBack,c_black,0);
draw_set_blend_mode(bm_normal);   

draw_set_alpha(1);

Tex = surface_get_texture(Surface);

if Width &gt; .1 &amp;&amp; Alpha &gt; 0.1
{
 draw_set_color(c_white);
 draw_primitive_begin_texture(pr_trianglestrip,Tex);
 
 for (i=0;i&lt;=360;i+=360/Sides)
 {
  // Normal Inner
  X[0] = x+lengthdir_x(Radius-Width,i)*XMult;
  Y[0] = y+lengthdir_y(Radius-Width,i)*YMult;
  // Normal Outer
  X[1] = x+lengthdir_x(Radius,i)*XMult;
  Y[1] = y+lengthdir_y(Radius,i)*YMult;
  // Tex Inner
  X[2] = (x+lengthdir_x(((Radius-Width)*OffsetFactor+OffsetValue),i+OffsetAngle)*XMult-view_xview)/surface_get_width(Surface);
  Y[2] = (y+lengthdir_y(((Radius-Width)*OffsetFactor+OffsetValue),i+OffsetAngle)*YMult-view_yview)/surface_get_height(Surface);
  // Tex Outer
  X[3] = (x+lengthdir_x(((Radius)*OffsetFactor+OffsetValue),i)*XMult-view_xview)/surface_get_width(Surface);
  Y[3] = (y+lengthdir_y(((Radius)*OffsetFactor+OffsetValue),i)*YMult-view_yview)/surface_get_height(Surface);
 
  draw_vertex_texture_color(X[0],Y[0],X[2],Y[2], VerCol, Alpha);
  draw_vertex_texture_color(X[1],Y[1],X[3],Y[3], VerCol, Alpha); 
 }

 draw_primitive_end();
}

if view_current != 0 exit;

if !global.PausedGame
{
 if !surface_exists(Surface)
 {
  Surface = surface_create(surface_get_width(application_surface),surface_get_height(application_surface));
  surface_copy(Surface,0,0,application_surface);
 }
 else
 surface_copy(Surface,0,0,application_surface);
}

if !global.PausedGame
{
 OffsetAngle *= .967;
 Width *= .992;
 Radius += Speed
 Speed *= .99;
 Alpha *= .983;
 
 Tick ++;
 
 XMulter *= .6; 
 XMult = .8 / (1+XMulter);
  
 Bloom *= .987;
}

if Bloom &lt;= 0.05
 instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
