<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sRipper</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Platform

initiate();
event_inherited();
set_collision(0,-7,-4,7,4);
Complex = 0;

xVel = 1;
yVel = 0;

// ENEMY VARIABLES

BlockPlasma = 0;

Health = 25;
FreezeHealth = 25;
ParalyzeHealth = 25;

DontExplode = 0;

Damage = 8;

ReflectBeam = 1;
ReflectCharged = 1;
IgnoreBeam = 0;
ReflectMissile = 1;
IgnoreMissile = 0;
ReflectSMissile = 0;
IgnoreSMissile = 0;

IgnoreBomb = 1;
IgnorePBomb = 1;

IgnoreSamus = 0; // Hit samus?

ScrewDamage = 1000;
StopScrew = 0;
ShineDamage = 1000;
StopShine = 0;
PseudoDamage = 0;
StopPseudo = 1;

FreezeTime = 400;
FreezeMask = sprite_index;
Frozen = 0;
Free = noone;
FreezeSound = 0;

ParalyzeTime = 60;

BlinkTime = 8;
Blink = -1;
Flash = 0;
CantBlinkTime = 16;
CantBlink = 0;

IgnoreInvul = 0;
xPush = 64/32;
yPush = -112/32;

// Typical variables

Facing = 1;
Turning = 0;
Index = 0;

image_speed = 0;

// Demo

variable_begin(1);

variable_add("x");
variable_add("y");
variable_add("Object");

variable_add("Index");
variable_add("Turning");
variable_add("Facing");
variable_add("xVel");
variable_add("yVel");
variable_add("Frozen");
variable_add("Paralyzed");

// Logbook

LogMenu = 1;
LogIndex = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>variable_end();
 with (Free)
 instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.PausedGame 
or global.PausedEnemies 
exit;

Exit = 0;

if Frozen
{
 Frozen--;
 if Frozen &gt; 0
 {
  Free = instance_create(x,y,oPlatformBlock);
  Free . sprite_index = FreezeMask;
 }
 else
 with (Free)
 instance_destroy();
 
 Exit = 1;
}

if FreezeSound FreezeSound--;

if Paralyzed
{
 Paralyzed--;
 Exit = 1;
}

if Blink
{
 if Blink == 8 or Blink == 1
  Flash = 5;
 Blink--;
 
 Exit = 1;
}

if CantBlink CantBlink--;

if Flash Flash--;

if Exit exit;

// Movement, animation

if !Frozen &amp;&amp; !Paralyzed
{
 if !Turning
 {
  Index += .1;
  if Index &gt;= 4
   Index = 0;
  xVel = Facing;
 }
 else
 {
  Index += 1/3+.01;
  if Index &gt;=  8
  {
   Index = 0;
   Turning = 0;
  }
  xVel = 0;
 }
}
else
xVel = 0;

// Wall checking

if collision_right(0,1) &amp;&amp; Facing == 1
{
 Facing = -1;
 Turning = 1;
 Index = 4;
}

if collision_left(0,1) &amp;&amp; Facing == -1
{
 Facing = 1;
 Turning = 1;
 Index = 4;
}

// Movement

move_to_simple(xVel,yVel);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Hit effects
// Sounds
// Check to see if ur not frozen!

sound_play_pos(sndRipperHurt,x,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Explode effects
// Sounds

if !DontExplode
{
 explode(x,y,3);
}

if LogMenu != -1 &amp;&amp; LogIndex != -1
 add_log(LogMenu,LogIndex);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw flash

if Flash fog_on(c_white);

// Draw sprite

draw_sprite_ext(sprite_index,floor(Index),x,y,Facing,1,0,image_blend,image_alpha);

// Draw frozen

if Frozen &amp;&amp; !(Frozen &lt; 86 &amp;&amp; (floor(global.Tick/2) mod 2 == 0))
{
 draw_frozen(sprite_index,floor(Index),x,y,Facing,1,0,image_blend,image_alpha);
}

// Draw Paralyzed

if Paralyzed &amp;&amp; !(Paralyzed &lt; 30 &amp;&amp; (floor(global.Tick/2) mod 2 == 0))
{
 draw_paralyzed(sprite_index,floor(Index),x,y,Facing,1,0,image_blend,image_alpha);
}

// Flash off

if Flash fog_off(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>14,7</point>
    <point>14,14</point>
  </PhysicsShapePoints>
</object>
