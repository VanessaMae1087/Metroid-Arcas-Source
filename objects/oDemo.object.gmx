<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.InGame = 1;
load_demos();

demo_begin(Demo[CurrentDemo]);
 global.Rectangle = 2;
TakeInput = 1;
Started = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.DemoFrame &gt; ds_map_find_value(global.JsonMap, "Length") - (global.DemoFadeTime+2)
{
// D=instance_create(x,y,oFade);
// D.Alpha=0;
// D.FadeSpeed = 1/global.DemoFadeTime; 
}
if global.DemoFrame &gt; ds_map_find_value(global.JsonMap, "Length") - (3)
 global.Rectangle = 2;
if global.DemoFrame &gt; ds_map_find_value(global.JsonMap, "Length") - (2)
{
 demo_end();

 if CurrentDemo != Demos - 1
 {
  demo_begin(Demo[CurrentDemo+1]);
  CurrentDemo++;
 }
 else
 {
  with (oPlayer) instance_destroy();
  instance_destroy();
//  room_goto(rTitle);
  with (oControl) alarm[0] = 1;
  global.InGame = 0;
  global.Transition = -1;
  global.Fade=0;
  global.PausedGame = 0;
  global.JustTrans=0;
 }          
}

if /*!instance_exists(oFade) &amp;&amp;*/ Started == 0
for (i=0;i&lt;9;i++)
if TakeInput
if keyboard_check_pressed(vk_anykey)
{
 TakeInput = 0;     
// D=instance_create(x,y,oFade);
// D.Alpha=0;
// D.FadeSpeed = 1/global.DemoFadeTime;  
}
if TakeInput == 0
{
 Started += 1/global.DemoFadeTime;
}

if Started &gt;= 1
{ demo_end();
 with (oPlayer) instance_destroy();
   instance_destroy();
//  room_goto(rTitle);
  with (oControl) alarm[0] = 1;
  global.InGame = 0;
  global.Transition = -1;
   global.Fade=0;
  global.PausedGame = 0;
 global.JustTrans=0;
 global.Rectangle=1;
}
 

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
